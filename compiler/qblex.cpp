#line 2 "/home/cai/projects/basic/compiler/qblex.cpp"

#line 4 "/home/cai/projects/basic/compiler/qblex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[620] =
    {   0,
        0,    0,    0,    0,  153,  151,  131,   12,  130,  151,
      121,    6,  132,  132,  132,  132,  149,   14,  128,  124,
      126,   58,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  151,  100,  147,    7,    4,    3,    4,
      131,    0,  150,    6,  100,  149,    0,    1,    5,  149,
      149,  127,  129,  125,  148,  147,  147,  147,  147,  147,
       18,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,   30,  147,  147,  147,  147,  147,  147,   35,  147,
      147,  147,  147,  147,   48,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  123,  147,
      135,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,   71,  147,
      147,  147,  147,  147,  147,  147,  147,    0,   13,  146,
        7,    2,    0,  149,    5,   74,  147,  120,  147,   76,
      147,  147,  147,  147,  147,  147,  147,  147,  147,   81,
      147,  147,   26,  147,   28,  147,   10,  147,  147,  147,
       42,   82,   41,  147,  147,   83,  147,   44,  147,  147,
      147,  147,  147,  147,   49,  133,  147,  147,   87,  147,
      147,   90,   52,  147,  147,   91,  147,  147,  147,  147,

       94,  147,   96,  121,  134,  147,  122,  147,  147,  147,
      147,  147,   99,  147,    9,  147,  147,  147,  147,  147,
      147,  147,  147,  104,  105,  147,  108,  147,  147,  147,
       68,  147,  147,  112,  147,  147,  147,  147,  147,  147,
      147,  147,  118,  147,  147,   41,  146,  146,  146,  146,
      146,  146,  146,  146,  146,   75,  147,   77,   78,  147,
      119,   22,   79,  147,  147,  147,   24,   25,  147,  147,
      147,   11,   10,   31,   32,  147,  147,    0,  147,  147,
      147,  147,  147,  147,   42,  147,  147,   84,   45,  147,
       85,  147,   47,  147,  147,  147,  147,  147,  147,  147,

       53,  147,   17,   55,  147,  147,   95,   56,   97,  147,
       98,   57,  147,   59,    8,  147,  147,  147,  147,  147,
      147,  147,   63,  147,  147,  109,  147,   65,  110,  147,
      147,  147,  147,  113,   70,  147,  147,  137,  147,  147,
      147,   16,  147,  146,  146,  146,  146,  146,  146,  146,
      147,   21,   80,  147,  147,  147,  147,  147,   11,   11,
       11,  147,  147,   31,  147,    0,    0,    0,    0,    0,
      147,  147,   35,  147,  147,  147,  147,  147,  136,  147,
      138,  147,   46,  147,  147,   50,   86,  147,   51,   89,
       54,  147,  147,  147,   58,    8,    8,  147,  147,  147,

      147,  147,  147,  147,  147,  106,  147,  147,  147,  147,
      147,  114,  116,   72,  147,   73,   15,  146,  146,  146,
      146,  146,  146,  146,  147,  147,  147,  147,  147,  147,
      147,   11,   11,  147,   31,   33,    0,    0,   35,    0,
        0,    0,    0,    0,  147,  147,  147,  147,   37,  147,
      147,  147,  147,  147,  147,   88,   92,   93,   33,  147,
       60,  147,   62,  101,  102,  103,   69,  107,   64,   66,
      147,   69,  111,  115,  117,  145,  146,  146,  146,  141,
      146,  146,  146,  146,  146,  147,  147,  147,  147,  147,
       27,   29,  147,    0,    0,    0,    0,   37,    0,    0,

       34,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,    8,   61,  147,  147,  146,  139,  146,  146,  146,
      140,  146,   19,  147,    8,   23,  147,  147,   34,    0,
        0,    0,    0,    0,    0,  147,  147,  147,  147,  147,
       39,   43,   67,  147,  133,    8,    8,  147,  147,  146,
      146,  146,  146,  146,   20,    8,    8,   26,  147,    0,
        0,    0,    0,    0,   39,  147,   40,   36,  147,   40,
       49,   66,  147,  146,  146,  146,  143,  146,  147,    0,
       40,   36,    0,   40,  147,  147,  147,   68,  146,  146,
      142,  144,  147,    0,    0,    0,   38,  147,  147,  146,

      146,  142,  147,   38,    0,    0,   36,  147,  146,   10,
       36,    0,   37,  146,   11,   37,   11,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       10,   11,   12,   10,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   10,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   30,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[633] =
    {   0,
        0, 1654,   72,   73, 1659, 1661, 1656, 1661, 1661,   74,
     1661,    0, 1661, 1646,   63,   71,   74, 1661,   62, 1661,
     1638, 1661,  122,   83,   91,   89,  131,  157,   90, 1648,
      170,  206,  195,  212,  104,  214,  258,  320,  271,  279,
       84,   79,   96,   90, 1661,  106,    0, 1661, 1661, 1640,
     1651,   97, 1661,    0, 1661,  154,  120, 1661,    0,  156,
      184, 1661, 1661, 1661, 1661, 1645,  173,  194,  198,  176,
      278,  252,  256,  312,  210,  254,  325,  264,  227,  316,
      315,  277,  366,  346,  343,  348,  368,  370, 1644,  286,
      393,  304,  355,  396, 1643,  414,  160,  405,  376,  445,

      404,  113,  437,  422,  400,  413,  263,  451, 1642,  394,
     1641,  418,  467,  452,  482,  477,  485,  488,  502,  480,
      486,  534,  476,  499,  487,  503,  531,  528,  537,  540,
      387,  538,  527,  554,  553,  560,  524,   92, 1661,  612,
        0, 1661, 1632, 1631,    0, 1638,  564, 1637,  571, 1636,
      563,  570,  572,  569,  587, 1635,  568,  221,  559, 1634,
      573,  599,  601,  609, 1633,  619,  603,  616,  631,  606,
      688, 1632, 1631,  638,  610,  636,  648, 1630,  399,  640,
      641,  654,  663,  646,  668,  670,  679,  651,  681,  691,
      690, 1629, 1628,  693,  700, 1627,  695,  703,  717,  696,

     1626, 1625, 1624, 1623, 1622,  704, 1621,  706,  728,  722,
      731,  726, 1620,  742,  762,  745,  754,  755,  756,  758,
      769,  770,  766, 1619, 1618,  773,  767,  768,  775,  780,
      771,  783,  786, 1617,  772,  782,  793,  807,  803,  812,
      808,  796, 1616,  810,  835, 1615, 1661, 1614,  831,  838,
      839,  836,  841,  845,  846, 1613,  848, 1612, 1611,  849,
     1610, 1609, 1661,  853,  857,  854, 1608, 1607,  859,  858,
      865, 1611,  887, 1605,  889,  878,  874,  900,  869,  868,
      891,  916,  903,  884, 1604,  923,  929, 1603, 1602,  921,
     1601,  918, 1600,  937,  931,  928,  935,  938,  942, 1599,

     1598,  944, 1596, 1593,  957,  965, 1661, 1590, 1587,  959,
     1584, 1581,  968, 1578, 1580,  971,  979,  970,  972,  973,
      975,  981, 1572,  983,  990, 1563,  992, 1562, 1661,  996,
     1004, 1005, 1000, 1561, 1560, 1010, 1559, 1558, 1013, 1009,
     1024, 1557, 1027, 1033, 1025, 1017, 1046, 1039, 1049, 1011,
     1059, 1556, 1554, 1054, 1056, 1061, 1063, 1064,    0, 1558,
     1557, 1067, 1077, 1551, 1079,  270,  372,  668, 1074,  822,
     1057, 1093, 1550, 1069, 1098, 1112, 1062, 1101, 1549, 1124,
     1548, 1128, 1544, 1078, 1131, 1543, 1541, 1102, 1540, 1661,
     1539, 1538, 1537, 1137, 1534,    0, 1535, 1106, 1134, 1139,

     1141, 1528, 1142, 1525, 1143, 1523, 1144, 1145, 1146, 1162,
     1149, 1522, 1661, 1521, 1520, 1512, 1511, 1154, 1147, 1159,
     1171, 1166, 1172, 1155, 1185, 1191, 1184, 1163, 1193, 1202,
     1205,    0, 1514, 1220, 1430, 1291,  462,  549, 1661,  995,
     1178, 1206, 1200, 1202, 1218, 1233, 1226, 1230, 1229, 1234,
     1231, 1243, 1241, 1239, 1238, 1279, 1661, 1661, 1266,   99,
     1177, 1254, 1174, 1661, 1151, 1661, 1095, 1661, 1055, 1246,
     1248,  925,  908, 1661, 1661, 1661,  885, 1259,  799, 1661,
     1258, 1262, 1282,  798, 1255, 1270, 1268,  248, 1293, 1283,
      785,  729, 1287, 1260, 1274, 1280, 1268, 1273, 1281, 1290,

      719, 1312, 1318, 1321, 1316, 1323, 1328, 1322, 1325, 1326,
     1331,  682,  676, 1333, 1336, 1341, 1661, 1349, 1347, 1350,
     1661, 1351,  627, 1356,  571,  510, 1357, 1370, 1661, 1321,
     1344, 1346, 1337, 1351, 1353, 1386, 1361, 1395, 1385, 1399,
      493,  458,  440, 1398,  416,    0,  415, 1411, 1409, 1412,
     1414, 1401,  409, 1416,  408,    0,  345,  307, 1402, 1395,
     1377, 1390, 1390, 1400, 1661, 1425,  297, 1426, 1432,  290,
      287,  283, 1427, 1433, 1442, 1454, 1661,  281, 1440, 1420,
     1661, 1421, 1424, 1661, 1434, 1470, 1473,  237, 1472, 1479,
     1475, 1661, 1477, 1451, 1451, 1462,  229, 1498, 1487,  211,

     1492,  199, 1500, 1661, 1468, 1463,  180, 1499, 1503,  333,
     1661, 1484,  169,  139,  135, 1661,    0,  125, 1661, 1571,
     1574, 1577,  113, 1580, 1583,  112, 1586, 1589, 1592, 1595,
     1598, 1601
    } ;

static yyconst flex_int16_t yy_def[633] =
    {   0,
      619,    1,  620,  620,  619,  619,  619,  619,  619,  621,
      619,  622,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  619,  619,  623,  624,  619,  619,  619,
      619,  621,  619,  622,  619,  619,  619,  619,  625,  619,
      619,  619,  619,  619,  619,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  619,  619,  626,
      624,  619,  619,  619,  625,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  619,  626,  626,  626,
      626,  626,  626,  626,  626,  623,  623,  623,  623,  623,
      623,  623,  619,  623,  623,  623,  623,  623,  623,  623,
      623,  627,  623,  623,  623,  623,  623,  619,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  619,  623,  623,  623,
      623,  623,  623,  623,  628,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  619,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  626,  626,  626,  626,  626,  626,  626,
      623,  623,  623,  623,  623,  623,  623,  623,  627,  627,
      629,  623,  623,  623,  623,  619,  619,  619,  619,  619,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  619,
      623,  623,  623,  623,  623,  628,  628,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  619,  623,  623,  623,  623,  626,  626,  626,
      626,  626,  626,  626,  623,  623,  623,  623,  623,  623,
      623,  629,  629,  623,  623,  623,  619,  619,  619,  619,
      619,  619,  619,  619,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  619,  619,  623,  623,
      623,  623,  623,  619,  623,  619,  623,  619,  623,  623,
      623,  623,  623,  619,  619,  619,  626,  626,  626,  619,
      626,  626,  626,  626,  626,  623,  623,  623,  623,  623,
      623,  623,  623,  619,  619,  619,  619,  619,  619,  619,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  630,  623,  623,  623,  626,  619,  626,  626,  626,
      619,  626,  623,  623,  631,  623,  623,  623,  619,  619,
      619,  619,  619,  619,  619,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  630,  630,  623,  623,  626,
      626,  626,  626,  626,  623,  631,  631,  623,  623,  619,
      619,  619,  619,  619,  619,  623,  623,  623,  623,  623,
      623,  623,  623,  626,  626,  626,  619,  626,  623,  619,
      619,  619,  619,  619,  623,  623,  623,  623,  626,  626,
      626,  619,  623,  619,  619,  619,  623,  623,  623,  626,

      626,  626,  623,  619,  619,  619,  623,  623,  626,  623,
      619,  619,  623,  626,  632,  619,  632,  632,    0,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619
    } ;

static yyconst flex_int16_t yy_nxt[1736] =
    {   0,
        6,    7,    8,    9,   10,    6,    6,   11,   12,   13,
       14,   13,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   30,
       30,   32,   33,   34,   35,   36,   30,   37,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   45,   46,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   30,   32,
       33,   34,   35,   36,   30,   37,   38,   39,   40,   41,
       42,   43,   30,   30,   49,   49,   53,   56,   53,   62,
       63,   58,   50,   50,   59,   65,   60,   57,   61,   65,
       65,  138,  139,  138,  139,   65,   65,   65,   57,   53,

      512,   53,   65,  135,  134,   65,  136,  138,  139,   79,
       65,   74,   65,   80,  248,   66,   57,   81,   75,   65,
       73,   93,   76,   82,   94,   77,  618,   57,   65,   78,
      137,  143,  135,  134,  144,  136,  618,   65,   79,  108,
       74,  109,   80,   67,   68,  480,   81,   75,   73,   93,
       76,   82,   94,   77,  140,   69,  201,   78,  137,   70,
       71,   72,   83,   65,   84,   85,   65,  108,   56,  109,
       56,   86,   67,   68,   87,   65,   65,   88,   57,   65,
       57,  190,   65,   69,  201,   89,   65,   70,   71,   72,
       83,   90,   84,   85,   91,   95,   60,   92,   61,   86,

       65,   65,   87,   96,   65,  247,   88,   57,   57,   57,
      190,  146,   65,  149,   89,  102,   65,  476,   65,   90,
       65,  148,   91,  103,   95,   92,   97,   65,  147,  104,
       98,   96,  105,   65,   99,   65,  106,   57,  110,  146,
      100,  149,  111,   65,  102,  101,  107,  156,  112,  525,
      148,  113,  103,  265,   65,   97,  147,  104,   65,   98,
       65,  105,   65,   99,   65,  106,  162,  110,  100,   65,
       65,  111,  152,  101,  107,  156,  112,   65,  114,  113,
      153,  265,  115,   65,   65,   65,  116,  592,  157,   65,
      437,  126,   65,   65,  162,  127,   65,  117,  128,  167,

      150,  152,  207,   65,  161,  129,  151,  114,  130,  153,
       65,  115,  131,   65,  132,  116,  157,  133,   65,  437,
      126,   65,   65,  178,  127,  117,   65,  128,  167,  150,
      207,   65,  161,  129,  615,  151,  130,  181,  163,   65,
      131,  164,  132,  154,  118,  133,  557,  165,  119,   65,
      155,  178,   65,  166,   65,  120,  121,  158,  159,  122,
      123,   65,  124,  160,  125,  181,  170,  163,  172,  171,
      164,  154,   65,  118,   65,  165,   65,  119,  155,  174,
      173,  166,   65,  120,  121,  158,  159,  122,  123,  182,
      124,  160,  125,   65,  168,  170,  175,  172,  171,   65,

       65,  177,   65,  176,  169,   65,   65,  174,  173,  194,
       65,   65,  438,  179,   65,  577,  547,  182,  210,   65,
       65,  288,   65,  168,   65,  175,  240,  180,   65,  177,
      191,  176,  169,  205,  183,  184,  185,  194,  192,  186,
      438,  200,  179,   65,  193,  204,   65,  210,  211,  187,
      288,   65,  188,  189,  240,  180,  206,   65,   65,  191,
      202,  205,  183,  184,   65,  185,  192,  195,  186,  200,
      203,  196,  193,   65,  204,  208,  211,  187,  197,  198,
      188,  189,   65,   65,  206,  213,   65,  199,   65,  202,
      209,   65,   65,   65,   65,  212,  195,  231,  203,   65,

      196,  494,  214,  219,  208,   65,  197,  198,   65,   65,
      220,  226,  222,  213,  215,  199,   65,  216,  209,  223,
      217,  218,  221,  227,  212,  233,  231,  232,  224,  494,
       65,  214,  219,   65,   65,  225,  234,   65,  220,  226,
       65,  222,  215,   65,   65,  216,   65,  223,  217,  218,
      221,  227,  236,  233,  228,  242,  232,  224,  229,   65,
       65,  246,  235,  225,  234,   65,   65,  237,  238,   65,
       65,  230,  557,  241,   65,   65,   65,   65,   65,   65,
      239,  236,  495,  228,  242,  243,  244,  229,  245,  246,
      235,  257,  260,   65,  267,  237,  258,  238,  266,  230,

      261,  241,  256,  259,  272,   65,  264,   65,  239,   65,
      495,  262,   65,  243,  244,   65,   65,  245,  247,  268,
      257,  260,   65,  267,  258,   65,  266,  277,  261,  270,
      256,  259,  249,   65,  264,  250,  251,   65,  269,  271,
      262,  274,   65,  273,   65,  252,   65,   65,  268,  285,
      253,  254,   65,  255,   65,  275,  277,   65,  270,  276,
       65,  249,  284,  290,  250,  251,  269,  286,  271,   65,
      274,  273,  289,  252,   65,  291,   65,  285,  253,  254,
      293,  255,   65,  547,  275,   65,  287,   65,  276,  278,
      297,  284,  290,  439,   65,  286,   65,   65,  295,   65,

      289,   65,   65,  292,  291,  294,   65,  298,  293,   65,
       65,  279,   65,  280,  287,  299,  281,  301,  297,  296,
      302,  303,  439,   65,  306,   65,  282,  295,   65,  300,
      283,  292,   65,  294,   65,   65,  298,   65,  304,  309,
      279,  305,  280,  308,  299,  281,  301,  296,   65,  302,
      303,   65,  311,  306,  282,  312,  310,  300,  283,  313,
       65,   65,   65,  315,   65,  314,  304,  309,   65,  317,
      305,  308,   65,   65,   65,   65,   65,   65,   65,   65,
      311,   65,  316,  320,  312,  310,  329,  313,   65,   65,
      324,   65,   65,  318,  314,  319,  321,  322,  317,   65,

      323,  325,   65,  334,  521,  517,  326,  327,  331,   65,
      328,  316,  320,   65,   65,  335,   65,  336,   65,  324,
      330,  318,  332,  319,  321,  333,  322,  338,  323,  341,
      325,  334,  340,  342,  326,  327,  331,  247,  328,  337,
      339,   65,  247,  335,  247,  247,  336,  247,  330,  444,
      332,  247,  247,  333,   65,   65,  338,  341,  345,   65,
       65,  340,  342,   65,   65,   65,  343,  337,  344,  339,
      350,   65,  346,  349,   65,   65,  347,  353,  444,  352,
       65,  354,  355,  356,   65,  348,  358,  345,  361,  371,
       65,  476,  351,   65,  343,   65,  344,   65,  357,  350,

      346,  278,  349,  364,  347,  365,  353,  352,  372,   65,
      354,  355,  356,  348,   65,  358,  373,  363,  371,  362,
      351,  379,   65,  366,   65,  367,  357,   65,  368,   65,
      378,   65,  364,  365,   65,   65,  372,   65,  369,  383,
      374,   65,  370,   65,   65,  373,  363,  362,   65,  379,
       65,  380,  366,  381,  367,  375,  376,  368,  377,  378,
      382,  384,  388,   65,  385,   65,  369,  386,  383,  374,
      370,   65,  387,  389,   65,  391,   65,   65,   65,   65,
      380,   65,  381,  375,  376,   65,  377,   65,  382,   65,
      384,  388,  385,  394,  392,  386,   65,  393,   65,  399,

      387,  389,   65,  391,  400,  405,   65,  395,  398,  401,
       65,   65,  402,  404,  403,   65,   65,  247,  408,   65,
      407,  394,  392,  247,  411,  393,  496,  410,  399,  406,
       65,  247,  400,   65,  405,  395,  398,  401,  409,  247,
      402,  404,  403,  412,  414,  247,  415,  408,  424,  407,
      416,  417,  247,  411,  496,  247,  410,  406,  420,  418,
       65,   65,   65,   65,  419,   65,  409,   65,   65,   65,
       65,  412,  414,   65,  415,   65,  424,  422,  421,  416,
      417,  423,  425,   65,   65,   65,  420,  427,  418,  428,
      450,  434,  419,  429,  430,  431,  445,  426,  440,   65,

      447,   65,  435,  436,   65,  422,  421,   65,   65,  423,
      454,  425,   65,  441,  442,  427,  443,  428,   65,  450,
      434,  429,  430,  431,  445,  426,  446,  440,  447,  451,
       65,  435,  436,  449,   65,  448,  460,   65,  454,  456,
       65,  441,  442,   65,  443,   65,  452,   65,   65,   65,
       65,   65,   65,  247,  446,   65,  453,   65,  451,  455,
      476,  247,  449,  448,  460,  480,  469,  456,   65,   65,
      459,  479,  247,  461,  463,  452,  462,  247,  247,  465,
       65,  473,  467,   65,  470,  453,  471,  481,  455,  472,
       65,   65,  477,  485,  478,  469,  484,   65,  459,   65,

      479,  461,  463,  489,  462,  483,  482,  465,   65,  473,
      467,   65,  470,  486,  471,  497,  481,  490,  472,  487,
      477,  485,  478,  488,   65,  484,   65,  498,  499,  492,
      500,  489,   65,  483,  482,   65,   65,   65,  501,   65,
       65,  491,  486,  497,   65,   65,  490,   65,  487,   65,
      503,  488,   65,  493,   65,  502,  498,  499,  492,  500,
       65,  247,  507,  510,  247,  247,  505,  501,  247,  491,
      504,  508,   65,  506,   65,  509,   65,  511,  513,  503,
      529,  493,  519,  522,  502,   65,  514,  515,  247,   65,
      507,  516,  510,   65,  505,  518,  530,   65,  504,   65,

      508,  506,  523,  509,  531,  511,  520,  513,  532,  529,
      533,  519,  522,  524,  514,  515,  527,  526,   65,  516,
      534,  535,   65,  518,   65,  530,  528,   65,   65,   65,
      523,   65,   65,  531,   65,  520,  532,   65,  533,   65,
      537,  524,   65,  538,  527,  540,  526,  247,  534,  535,
      539,  536,  541,  247,  528,  247,  247,  247,  543,  544,
      560,  542,   65,   65,  549,  550,  561,   65,  562,  537,
      548,  563,  538,  564,  540,  545,   65,  565,  539,  536,
      555,  541,  553,  551,  552,  554,  543,  544,  560,  542,
      559,   65,   65,  549,  550,  561,  558,  562,  548,  563,

      567,   65,  564,  545,   65,   65,  565,  247,   65,  555,
      553,  551,  552,  554,  566,   65,  581,   65,  247,  559,
      247,  576,  247,  580,  558,  569,  570,  584,  567,  582,
      583,   65,   65,   65,  568,  572,   65,  571,   65,  247,
       65,  579,  573,  566,  581,  574,   65,  575,  247,  578,
      576,  588,  580,  569,  594,  570,  584,  582,  583,  585,
      247,  595,  568,  596,  572,  571,  586,  597,  593,  579,
      573,  587,  589,  574,  590,  575,   65,  578,  476,   65,
      588,  247,  594,   65,  604,  247,  591,  585,  605,  595,
      606,  596,  611,   65,  586,  597,  612,  593,  247,  587,

      589,  599,  590,  601,   65,   65,   65,  598,  616,  247,
      600,  603,  604,  602,  591,  433,  605,   65,   65,  606,
      608,  611,  607,  613,  612,  609,  475,   65,  474,  468,
      599,  466,  601,  610,  464,  598,  397,  616,  600,  603,
       65,  602,  614,  458,  457,   65,   65,   65,  608,   65,
       65,  607,  613,  609,   65,   65,   65,   65,  433,  360,
       65,  610,   65,   65,   65,  413,   65,   65,   65,   65,
      614,   48,   48,   48,   52,   52,   52,   54,   65,   54,
      141,  397,  141,  145,   65,  145,  359,   65,  359,  396,
       65,  396,  432,   65,  432,  546,   65,  546,  556,   65,

      556,  617,   65,  617,   65,  390,   65,   65,   65,   65,
       65,   65,  360,   65,   65,   65,   65,   65,   65,   65,
      247,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  307,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  263,   65,   65,   65,  144,  144,   65,   65,   65,
       65,   65,   51,  142,   65,   64,   55,   51,  619,   47,
        5,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619
    } ;

static yyconst flex_int16_t yy_chk[1736] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   10,   15,   10,   19,
       19,   16,    3,    4,   16,   42,   17,   15,   17,   24,
       41,   44,   44,  138,  138,   26,   29,   25,   17,   52,

      460,   52,   43,   42,   41,  460,   42,   46,   46,   26,
       35,   25,   46,   26,  626,  623,   15,   26,   25,  102,
       24,   29,   25,   26,   29,   25,  618,   17,   23,   25,
       43,   57,   42,   41,   57,   42,  615,   27,   26,   35,
       25,   35,   26,   23,   23,  614,   26,   25,   24,   29,
       25,   26,   29,   25,   46,   23,  102,   25,   43,   23,
       23,   23,   27,   28,   27,   27,   97,   35,   56,   35,
       60,   27,   23,   23,   27,  613,   31,   28,   56,   67,
       60,   97,   70,   23,  102,   28,  607,   23,   23,   23,
       27,   28,   27,   27,   28,   31,   61,   28,   61,   27,

       68,   33,   27,   31,   69,  602,   28,   56,   61,   60,
       97,   67,   32,   70,   28,   33,   75,  600,   34,   28,
       36,   69,   28,   33,   31,   28,   32,  158,   68,   33,
       32,   31,   34,   79,   32,  597,   34,   61,   36,   67,
       32,   70,   36,  588,   33,   32,   34,   75,   36,  488,
       69,   36,   33,  158,  488,   32,   68,   33,   72,   32,
       76,   34,   73,   32,   37,   34,   79,   36,   32,  107,
       78,   36,   72,   32,   34,   75,   36,   39,   37,   36,
       73,  158,   37,   82,   71,   40,   37,  578,   76,  572,
      366,   39,   90,  571,   79,   39,  570,   37,   39,   82,

       71,   72,  107,  567,   78,   39,   71,   37,   39,   73,
       92,   37,   40,  558,   40,   37,   76,   40,   74,  366,
       39,   81,   80,   90,   39,   37,   38,   39,   82,   71,
      107,   77,   78,   39,  610,   71,   39,   92,   80,  610,
       40,   80,   40,   74,   38,   40,  557,   81,   38,   85,
       74,   90,   84,   81,   86,   38,   38,   77,   77,   38,
       38,   93,   38,   77,   38,   92,   84,   80,   85,   84,
       80,   74,   83,   38,   87,   81,   88,   38,   74,   86,
       85,   81,   99,   38,   38,   77,   77,   38,   38,   93,
       38,   77,   38,  131,   83,   84,   87,   85,   84,   91,

      110,   88,   94,   87,   83,  179,  105,   86,   85,   99,
      101,   98,  367,   91,  555,  553,  547,   93,  110,  106,
       96,  179,  545,   83,  112,   87,  131,   91,  104,   88,
       98,   87,   83,  105,   94,   94,   96,   99,   98,   96,
      367,  101,   91,  103,   98,  104,  543,  110,  112,   96,
      179,  100,   96,   96,  131,   91,  106,  108,  114,   98,
      103,  105,   94,   94,  542,   96,   98,  100,   96,  101,
      103,  100,   98,  113,  104,  108,  112,   96,  100,  100,
       96,   96,  123,  116,  106,  114,  120,  100,  115,  103,
      108,  117,  121,  125,  118,  113,  100,  123,  103,  541,

      100,  437,  115,  116,  108,  124,  100,  100,  119,  126,
      116,  120,  118,  114,  115,  100,  526,  115,  108,  118,
      115,  115,  117,  121,  113,  125,  123,  124,  119,  437,
      137,  115,  116,  133,  128,  119,  126,  127,  116,  120,
      122,  118,  115,  129,  132,  115,  130,  118,  115,  115,
      117,  121,  128,  125,  122,  133,  124,  119,  122,  135,
      134,  137,  127,  119,  126,  159,  136,  129,  130,  151,
      147,  122,  525,  132,  157,  154,  152,  149,  153,  161,
      130,  128,  438,  122,  133,  134,  135,  122,  136,  137,
      127,  149,  153,  155,  161,  129,  151,  130,  159,  122,

      154,  132,  147,  152,  167,  162,  157,  163,  130,  167,
      438,  155,  170,  134,  135,  164,  175,  136,  140,  162,
      149,  153,  168,  161,  151,  166,  159,  170,  154,  164,
      147,  152,  140,  523,  157,  140,  140,  169,  163,  166,
      155,  168,  176,  167,  174,  140,  180,  181,  162,  175,
      140,  140,  184,  140,  177,  169,  170,  188,  164,  169,
      182,  140,  174,  181,  140,  140,  163,  176,  166,  183,
      168,  167,  180,  140,  185,  182,  186,  175,  140,  140,
      184,  140,  513,  512,  169,  187,  177,  189,  169,  171,
      188,  174,  181,  368,  171,  176,  191,  190,  186,  194,

      180,  197,  200,  183,  182,  185,  195,  189,  184,  198,
      206,  171,  208,  171,  177,  190,  171,  194,  188,  187,
      195,  197,  368,  199,  200,  501,  171,  186,  210,  191,
      171,  183,  212,  185,  209,  492,  189,  211,  198,  208,
      171,  199,  171,  206,  190,  171,  194,  187,  214,  195,
      197,  216,  210,  200,  171,  211,  209,  191,  171,  212,
      217,  218,  219,  215,  220,  214,  198,  208,  215,  216,
      199,  206,  223,  227,  228,  221,  222,  231,  235,  226,
      210,  229,  215,  219,  211,  209,  230,  212,  236,  232,
      223,  491,  233,  217,  214,  218,  220,  221,  216,  237,

      222,  226,  242,  235,  484,  479,  227,  228,  231,  239,
      229,  215,  219,  238,  241,  236,  244,  237,  240,  223,
      230,  217,  232,  218,  220,  233,  221,  239,  222,  242,
      226,  235,  241,  244,  227,  228,  231,  249,  229,  238,
      240,  245,  252,  236,  250,  251,  237,  253,  230,  370,
      232,  254,  255,  233,  257,  260,  239,  242,  250,  264,
      266,  241,  244,  265,  270,  269,  245,  238,  249,  240,
      255,  271,  251,  254,  280,  279,  252,  264,  370,  260,
      277,  265,  266,  269,  276,  253,  271,  250,  273,  279,
      284,  477,  257,  273,  245,  275,  249,  281,  270,  255,

      251,  278,  254,  276,  252,  277,  264,  260,  280,  283,
      265,  266,  269,  253,  473,  271,  281,  275,  279,  273,
      257,  284,  282,  278,  292,  278,  270,  290,  278,  286,
      283,  472,  276,  277,  296,  287,  280,  295,  278,  292,
      282,  297,  278,  294,  298,  281,  275,  273,  299,  284,
      302,  286,  278,  287,  278,  282,  282,  278,  282,  283,
      290,  294,  298,  305,  295,  310,  278,  296,  292,  282,
      278,  306,  297,  299,  313,  302,  318,  316,  319,  320,
      286,  321,  287,  282,  282,  317,  282,  322,  290,  324,
      294,  298,  295,  310,  305,  296,  325,  306,  327,  317,

      297,  299,  330,  302,  318,  324,  333,  313,  316,  319,
      331,  332,  320,  322,  321,  340,  336,  350,  330,  339,
      327,  310,  305,  346,  333,  306,  440,  332,  317,  325,
      341,  345,  318,  343,  324,  313,  316,  319,  331,  344,
      320,  322,  321,  336,  339,  348,  340,  330,  350,  327,
      341,  343,  347,  333,  440,  349,  332,  325,  346,  344,
      354,  469,  355,  371,  345,  351,  331,  356,  377,  357,
      358,  336,  339,  362,  340,  374,  350,  348,  347,  341,
      343,  349,  351,  363,  384,  365,  346,  354,  344,  355,
      377,  362,  345,  356,  357,  358,  371,  351,  369,  372,

      374,  467,  363,  365,  375,  348,  347,  378,  388,  349,
      384,  351,  398,  369,  369,  354,  369,  355,  376,  377,
      362,  356,  357,  358,  371,  351,  372,  369,  374,  378,
      380,  363,  365,  376,  382,  375,  398,  385,  384,  388,
      399,  369,  369,  394,  369,  400,  380,  401,  403,  405,
      407,  408,  409,  419,  372,  411,  382,  465,  378,  385,
      418,  424,  376,  375,  398,  420,  407,  388,  410,  428,
      394,  419,  422,  399,  401,  380,  400,  421,  423,  403,
      463,  411,  405,  461,  408,  382,  409,  420,  385,  410,
      427,  425,  418,  424,  418,  407,  423,  426,  394,  429,

      419,  399,  401,  428,  400,  422,  421,  403,  430,  411,
      405,  431,  408,  425,  409,  441,  420,  429,  410,  426,
      418,  424,  418,  427,  445,  423,  434,  442,  443,  431,
      444,  428,  447,  422,  421,  449,  448,  451,  445,  446,
      450,  430,  425,  441,  455,  454,  429,  453,  426,  452,
      447,  427,  470,  434,  471,  446,  442,  443,  431,  444,
      462,  485,  451,  454,  481,  478,  449,  445,  482,  430,
      448,  452,  459,  450,  487,  453,  486,  455,  462,  447,
      494,  434,  482,  485,  446,  456,  470,  471,  483,  490,
      451,  478,  454,  493,  449,  481,  495,  436,  448,  489,

      452,  450,  486,  453,  496,  455,  483,  462,  497,  494,
      498,  482,  485,  487,  470,  471,  490,  489,  502,  478,
      499,  500,  505,  481,  503,  495,  493,  504,  508,  506,
      486,  509,  510,  496,  507,  483,  497,  511,  498,  514,
      503,  487,  515,  504,  490,  506,  489,  516,  499,  500,
      505,  502,  507,  519,  493,  518,  520,  522,  509,  510,
      530,  508,  524,  527,  515,  516,  531,  537,  532,  503,
      514,  533,  504,  534,  506,  511,  528,  535,  505,  502,
      524,  507,  520,  518,  519,  522,  509,  510,  530,  508,
      528,  539,  536,  515,  516,  531,  527,  532,  514,  533,

      537,  538,  534,  511,  544,  540,  535,  552,  559,  524,
      520,  518,  519,  522,  536,  549,  561,  548,  550,  528,
      551,  552,  554,  560,  527,  539,  540,  564,  537,  562,
      563,  566,  568,  573,  538,  548,  435,  544,  569,  574,
      585,  559,  549,  536,  561,  550,  579,  551,  575,  554,
      552,  573,  560,  539,  580,  540,  564,  562,  563,  566,
      576,  582,  538,  583,  548,  544,  568,  585,  579,  559,
      549,  569,  574,  550,  575,  551,  586,  554,  589,  587,
      573,  591,  580,  593,  594,  590,  576,  566,  595,  582,
      596,  583,  605,  599,  568,  585,  606,  579,  601,  569,

      574,  587,  575,  590,  598,  608,  603,  586,  612,  609,
      589,  593,  594,  591,  576,  433,  595,  417,  416,  596,
      599,  605,  598,  608,  606,  601,  415,  414,  412,  406,
      587,  404,  590,  603,  402,  586,  397,  612,  589,  593,
      395,  591,  609,  393,  392,  391,  389,  387,  599,  386,
      383,  598,  608,  601,  381,  379,  373,  364,  361,  360,
      353,  603,  352,  342,  338,  337,  335,  334,  328,  326,
      609,  620,  620,  620,  621,  621,  621,  622,  323,  622,
      624,  315,  624,  625,  314,  625,  627,  312,  627,  628,
      311,  628,  629,  309,  629,  630,  308,  630,  631,  304,

      631,  632,  303,  632,  301,  300,  293,  291,  289,  288,
      285,  274,  272,  268,  267,  262,  261,  259,  258,  256,
      248,  246,  243,  234,  225,  224,  213,  207,  205,  204,
      203,  202,  201,  196,  193,  192,  178,  173,  172,  165,
      160,  156,  150,  148,  146,  144,  143,  111,  109,   95,
       89,   66,   51,   50,   30,   21,   14,    7,    5,    2,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qblex.ll"
/*
    lexcial analize for QBASIC
	Copyright (C) 2009-2010 Thomas Larsen and Pedro Sá.
	Copyright (C) 1995-2005 Marc-Oliver Ihm.
    Copyright (C) 2012  microcai <microcai@fedoraproject.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#line 31 "qblex.ll"

/* Include main header file. */
#include "qbc.h"

/* Get tokens from parser library. */
#include "parser.hpp"

using namespace qb;

typedef parser::semantic_type YYSTYPE;
typedef location YYLTYPE;
typedef parser::token token;

#define error printf
/* Local variables. */
int count = 0;                  /* for strings */

#line 1090 "/home/cai/projects/basic/compiler/qblex.cpp"

#define INITIAL 0
#define block_comment 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

YYSTYPE * yyget_lval (void );

void yyset_lval (YYSTYPE * yylval_param  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param )
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
        YYSTYPE * yylval;
    
#line 55 "qblex.ll"


#line 1285 "/home/cai/projects/basic/compiler/qblex.cpp"

    yylval = yylval_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 620 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1661 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
#line 57 "qblex.ll"
{

   return token::tEOPROG;
   
}
	YY_BREAK
case 1:
YY_RULE_SETUP
#line 63 "qblex.ll"
{
   yylval->separator = 0;
   BEGIN (block_comment);
}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 68 "qblex.ll"
{
   BEGIN (INITIAL);
   return token::tSEPARATOR;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 72 "qblex.ll"
{
   yylval->separator += 1;
}
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 75 "qblex.ll"
{
   error ("block comment not terminated");
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "qblex.ll"
/* eat comment */
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 81 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 86 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "qblex.ll"
return token::tSEPARATOR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "qblex.ll"
/* add to program documentation */ {
 //  add_doc (strdup (""));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "qblex.ll"
/* add to program documentation */ {
   for (count = 1; *yytext != ' ' && *yytext != '\r' && *yytext != '\t' && *yytext != '\f' && *yytext != '\v'; count++) {
      yytext ++;
   }
   yytext ++;
  // add_doc (mystrdup (yytext));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 119 "qblex.ll"
{
   yylval->separator = 1;
   return token::tSEPARATOR;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 124 "qblex.ll"
{  /* handle line continuation */
   yylineno += 1;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "qblex.ll"
{
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "qblex.ll"
return token::tWHILE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "qblex.ll"
return token::tWEND;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "qblex.ll"
return token::tLONG;/* variables type*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "qblex.ll"
return token::tAS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 142 "qblex.ll"
return token::tARDIM;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 143 "qblex.ll"
return token::tARSIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 144 "qblex.ll"
return token::tBREAK;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 145 "qblex.ll"
return token::tCASE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 146 "qblex.ll"
return token::tCONTINUE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 147 "qblex.ll"
return token::tCSUB;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 148 "qblex.ll"
return token::tDATA;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 149 "qblex.ll"
return token::tDEC;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 150 "qblex.ll"
return token::tDEFAULT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 151 "qblex.ll"
{ printf("got DIM\n");   return token::tDIM;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 152 "qblex.ll"
return token::tDISABLE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 153 "qblex.ll"
return token::tDO;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "qblex.ll"
return token::tELSEIF;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "qblex.ll"
return token::tELSE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "qblex.ll"
return token::tENABLE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "qblex.ll"
return token::tENDDATA;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "qblex.ll"
return token::tENDIF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "qblex.ll"
return token::tENDSTRUCT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "qblex.ll"
return token::tENDSUB;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 162 "qblex.ll"
return token::tENDFUNCTION;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "qblex.ll"
return token::tWEND;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "qblex.ll"
return token::tSEND;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 166 "qblex.ll"
return token::tEOR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "qblex.ll"
return token::tEXIT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 168 "qblex.ll"
return token::tEXPLICIT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 169 "qblex.ll"
return token::tFOR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 170 "qblex.ll"
return token::tFROM;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 171 "qblex.ll"
return token::tGOSUB;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 172 "qblex.ll"
return token::tGOTO;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "qblex.ll"
return token::tIF;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 174 "qblex.ll"
return token::tINC;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 175 "qblex.ll"
return token::tINPUT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "qblex.ll"
return token::tLABEL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "qblex.ll"
return token::tLET;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "qblex.ll"
return token::tLINE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 179 "qblex.ll"
return token::tLOCAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 180 "qblex.ll"
return token::tLOOP;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "qblex.ll"
return token::tNEXT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 182 "qblex.ll"
return token::tPOKE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "qblex.ll"
return token::tPRINT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "qblex.ll"
return token::tREAD;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "qblex.ll"
return token::tREPEAT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "qblex.ll"
return token::tRESTORE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "qblex.ll"
return token::tRETURN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "qblex.ll"
return token::tSEEK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "qblex.ll"
return token::tSTATIC;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "qblex.ll"
return token::tSTEP;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "qblex.ll"
return token::tSTRUCT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "qblex.ll"
return token::tFUNCTION;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "qblex.ll"
return token::tSUB;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "qblex.ll"
return token::tSWITCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "qblex.ll"
return token::tTHEN;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "qblex.ll"
return token::tTO;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "qblex.ll"
return token::tUNTIL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "qblex.ll"
return token::tUSING;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 200 "qblex.ll"
return token::tABS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 201 "qblex.ll"
return token::tACOS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 202 "qblex.ll"
return token::tASC;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 203 "qblex.ll"
return token::tASIN;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 204 "qblex.ll"
return token::tATAN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 205 "qblex.ll"
return token::tCHR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 206 "qblex.ll"
return token::tCLOSE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 207 "qblex.ll"
return token::tCOS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 208 "qblex.ll"
return token::tEOF;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 209 "qblex.ll"
return token::tEXP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 210 "qblex.ll"
return token::tFRAC;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 211 "qblex.ll"
return token::tGLOB;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 212 "qblex.ll"
return token::tINSTR;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "qblex.ll"
return token::tINT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 214 "qblex.ll"
return token::tINT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "qblex.ll"
return token::tLEFT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 216 "qblex.ll"
return token::tLEN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 217 "qblex.ll"
return token::tLOG;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 218 "qblex.ll"
return token::tLOWER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 219 "qblex.ll"
return token::tLTRIM;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 220 "qblex.ll"
return token::tMAX;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 221 "qblex.ll"
return token::tMID;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 222 "qblex.ll"
return token::tMIN;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 223 "qblex.ll"
return token::tOPEN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 224 "qblex.ll"
return token::tPEEK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 225 "qblex.ll"
return token::tRAN;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 226 "qblex.ll"
return token::tPOW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 227 "qblex.ll"
return token::tRIGHT;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 228 "qblex.ll"
return token::tRINSTR;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 229 "qblex.ll"
return token::tRTRIM;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 230 "qblex.ll"
return token::tSIG;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 231 "qblex.ll"
return token::tSIN;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 232 "qblex.ll"
return token::tSPLIT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 233 "qblex.ll"
return token::tSPLITALT;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 234 "qblex.ll"
return token::tSQR;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 235 "qblex.ll"
return token::tSQRT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 236 "qblex.ll"
return token::tSTR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 237 "qblex.ll"
return token::tSYSTEM;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 238 "qblex.ll"
return token::tTAN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 239 "qblex.ll"
return token::tTELL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 240 "qblex.ll"
return token::tTOKEN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 241 "qblex.ll"
return token::tTOKENALT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 242 "qblex.ll"
return token::tTRIM;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 243 "qblex.ll"
return token::tUPPER;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 244 "qblex.ll"
return token::tVAL;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 245 "qblex.ll"
return token::tCALL;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "qblex.ll"
return token::tAND;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "qblex.ll"
return token::tMOD;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "qblex.ll"
return token::tOR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "qblex.ll"
return token::tEQU;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "qblex.ll"
return token::tGEQ;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "qblex.ll"
return token::tGTN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "qblex.ll"
return token::tLEQ;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "qblex.ll"
return token::tLTN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "qblex.ll"
return token::tNEQ;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 259 "qblex.ll"
/* eat whitespace */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 261 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 265 "qblex.ll"
{
   yylval->number = strtod ("inf", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 270 "qblex.ll"
{
   yylval->number = strtod ("nan", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 275 "qblex.ll"
{
   yylval->number = 3.1415926535897932;
   return token::tNUMBER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 280 "qblex.ll"
{
   yylval->number = 2.7182818284590452;
   return token::tNUMBER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 285 "qblex.ll"
{
   yylval->number = 1;
   return token::tNUMBER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 290 "qblex.ll"
{
   yylval->number = 0;
   return token::tNUMBER;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 295 "qblex.ll"
{
   return token::tDATE;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 299 "qblex.ll"
{
   return token::tTIME;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 303 "qblex.ll"
{
   return token::tENV;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 307 "qblex.ll"
{
   yylval->symbol = strdup ("__numparam");
   return token::tNUMSYM;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 312 "qblex.ll"
{
   yylval->symbol = strdup (SYSTEM_NAME);
   return token::tSTRING;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 317 "qblex.ll"
{
   yylval->string = strdup (VERSION);
   return token::tSTRING;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "qblex.ll"
{
   return token::tARG;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 326 "qblex.ll"
{
   error ("symbol prefix \"__\" is reserved for internal variables");
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 330 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tNUMSYM;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 335 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tSTRSYM;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 340 "qblex.ll"
{
   yylval->number = strtod (yytext, NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 345 "qblex.ll"
{
   if (yytext[yyleng - 1] == '\n') {
      printf ("string not terminated");
   }
   for (count = 0; yytext[(yyleng - count - 1) - 1] == '\\'; count++);
   if (count % 2) {
      yyless (yyleng - 1);
      yymore ();
   }
   else {
      yylval->string = strdup (yytext + 1);
      *(yylval->string + yyleng - 2) = '\0';
      replace (yylval->string);
      return token::tSTRING;
   }
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 362 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 367 "qblex.ll"
ECHO;
	YY_BREAK
#line 2262 "/home/cai/projects/basic/compiler/qblex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 620 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 620 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 619);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 367 "qblex.ll"



/* Report an error. */
void yyerror (char *msg) {
   /* Report the error. */
   if (*yytext == '\n' || *yytext == '\0') {
      printf ("%s at end of line", msg);
   }
   else {
      printf ("%s at \"%s\"", msg, yytext);
   }

   /* Return. */
   return;
}

/* Replace escape characters. */
char *replace (char *string) {
   char *from, *to, *pointer;
   char *hexdigits = "0123456789abcdef";
   int value;

   /* Initialise. */
   from = string;
   to = string;

   /* Replace. */
   while (*from) {
      if (*from == '\\') {
         from++;
         switch (*from) {
            case 'n':
               *to = '\n';
               break;
            case 't':
               *to = '\t';
               break;
            case 'v':
               *to = '\v';
               break;
            case 'b':
               *to = '\b';
               break;
            case 'r':
               *to = '\r';
               break;
            case 'f':
               *to = '\f';
               break;
            case 'a':
               *to = '\a';
               break;
            case '\\':
               *to = '\\';
               break;
            case '\?':
               *to = '\?';
               break;
            case '\'':
               *to = '\'';
               break;
            case '\"':
               *to = '\"';
               break;
            case 'x':
               value = 0;
               if ((pointer =
                    strchr (hexdigits, tolower (*(from + 1))))
                   && pointer - hexdigits < 16) {
                  from++;
                  value = pointer - hexdigits;
                  if ((pointer =
                       strchr (hexdigits, tolower (*(from + 1))))
                      && pointer - hexdigits < 16) {
                     from++;
                     value *= 16;
                     value += pointer - hexdigits;
                  }
               }
               *to = value;
               break;
            default:
               *to = '\\';
               to++;
               *to = *from;
               break;
         }
      }
      else
         *to = *from;
      from++;
      to++;
   }
   *to = '\0';

   /* Return. */
   return string;
}

