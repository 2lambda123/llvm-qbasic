#line 2 "/home/cai/projects/basic/compiler/qblex.cpp"

#line 4 "/home/cai/projects/basic/compiler/qblex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[595] =
    {   0,
        0,    0,    0,    0,  151,  149,   14,   11,  129,  149,
      120,    6,  130,  130,  130,  130,  147,   13,  127,  123,
      125,   55,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  149,  100,  145,    7,    4,    3,    4,
       14,    0,  148,    6,  100,  147,    0,    1,    5,  147,
      147,  126,  128,  124,  146,  145,  145,  145,  145,  145,
       16,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,   29,  145,  145,  145,  145,  145,  145,   34,  145,
      145,  145,  145,   45,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  122,  145,  133,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,   67,  145,  145,
      145,  145,  145,  145,  145,  145,    0,   12,  144,    7,
        2,    0,  147,    5,   72,  145,  119,  145,   74,  145,
      145,  145,  145,  145,  145,  145,  145,   79,  145,  145,
       25,  145,   27,  145,    9,  145,  145,  145,   39,   80,
       38,  145,  145,  145,   83,  145,   41,  145,  145,  145,
      145,  145,   46,  131,  145,  145,   87,  145,  145,   90,
       49,  145,  145,   91,  145,  145,  145,  145,   94,  145,

       96,  120,  132,  145,  121,  145,  145,  145,  145,  145,
       99,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  104,  105,  145,  108,  145,  145,  145,   64,  145,
      145,  112,  145,  145,  145,  145,  145,  145,  145,  145,
      118,  145,  145,   38,  144,  144,  144,  144,  144,  144,
      144,  144,  144,   73,  145,   75,   76,  145,   20,   77,
      145,  145,  145,  145,   23,   24,  145,  145,  145,   10,
        9,   30,   31,  145,  145,    0,  145,  145,  145,  145,
      145,   39,  145,  145,   84,   42,   85,  145,   44,  145,
      145,  145,  145,  145,  145,  145,   50,  145,   15,   52,

      145,  145,   95,   53,   97,  145,   98,   54,  145,   56,
        8,  145,  145,  145,  145,  145,  145,  145,   60,  145,
      145,  109,  145,   62,  110,  145,  145,  145,  145,  113,
       66,  145,  145,  135,  145,  145,  145,   70,  145,  144,
      144,  144,  144,  144,  144,  144,  145,   19,   78,  145,
      145,  145,  145,  145,  145,   10,   10,   10,  145,  145,
       30,  145,    0,    0,    0,  145,   34,  145,  145,  145,
      145,  134,  145,  145,  136,   43,  145,  145,   47,   86,
      145,   48,   89,   51,  145,  145,  145,   55,    8,    8,
      145,  145,  145,  145,  145,  145,  145,  145,  106,  145,

      145,  145,  145,  145,  114,  116,   68,  145,   69,   71,
      144,  144,  144,  144,  144,  144,  144,  145,  145,  145,
      145,  145,  145,  145,  145,   10,   10,  145,   30,   32,
        0,   34,    0,    0,    0,    0,  145,  145,  145,   36,
      145,  145,  145,  145,  145,   88,   92,   93,   32,  145,
       57,  145,   59,  101,  102,  103,   65,  107,   61,   63,
      145,   65,  111,  115,  117,  143,  144,  144,  144,  139,
      144,  144,  144,  144,  144,  145,  145,  145,   21,  145,
      145,   26,   28,  145,    0,    0,    0,   36,    0,   33,
      145,  145,  145,  145,   81,  145,  145,  145,    8,   58,

      145,  145,  144,  137,  144,  144,  144,  138,  144,   17,
      145,    8,   22,  145,  145,   33,    0,    0,    0,    0,
      145,  145,  145,  145,   82,   40,  145,  131,    8,    8,
      145,  145,  144,  144,  144,  144,  144,   18,    8,    8,
       25,  145,    0,    0,    0,    0,   37,   35,  145,   37,
       46,   63,  145,  144,  144,  144,  141,  144,  145,   37,
       35,    0,   37,  145,  145,   64,  144,  144,  140,  142,
      145,    0,    0,  145,  145,  144,  144,  140,  145,    0,
        0,   35,  145,  144,    9,   35,    0,   36,  144,   10,
       36,   10,   10,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       10,   11,   12,   10,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   10,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   30,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[608] =
    {   0,
        0, 1589,   72,   73, 1594, 1596, 1591, 1596, 1596,   74,
     1596,    0, 1596, 1581,   63,   71,   74, 1596,   62, 1596,
     1573, 1596,  122,   83,   91,   89,  131,  148,   90, 1583,
      161,  192,  175,  194,  171,  205,  224,  286,  251,  268,
       84,   79,   96,   90, 1596,  249,    0, 1596, 1596, 1575,
     1586,   97, 1596,    0, 1596,   86,   94, 1596,    0,  117,
      211, 1596, 1596, 1596, 1596, 1580,  270,  157,  259,  201,
      287,   87,  266,  274,  262,  255,  314,  292,  296,  339,
      335,  195,  331,  342,  345,  365,  378,  373, 1579,  318,
      366,  371,  370, 1578,  405,  273,  413,  381,  428,  383,

      113,  443,  406,  392,  417,  439,  457, 1577,  433, 1576,
      327,  445,  458,  479,  494,  410,  463,  497,  476,  471,
      520,  491,  503,  487,  515,  507,  509,  526,  523,  528,
      537,  531,  544,  541,  555,  559,  113, 1596,  619,    0,
     1596, 1567, 1566,    0, 1573,  548, 1572,  372, 1571,  565,
      571,  558,  575, 1570,  581,  573,  562, 1569,  588,  586,
      576,  591, 1568,  610,  609,  215,  638,  625,  655, 1567,
     1566,  621,  612,  583,  617,  615, 1565,  645,  658,  648,
      649,  667,  673,  659,  664,  676,  693,  678,  686, 1564,
     1563,  699,  688, 1562,  694,  691,  703,  700, 1561, 1560,

     1559, 1558, 1557,  697, 1556,  707,  705,  716,  718,  708,
     1555,  724,  738,  739,  728,  744,  745,  753,  749,  755,
      754, 1554, 1553,  760,  759,  764,  767,  769,  773,  775,
      776, 1552,  774,  783,  787,  788,  794,  793,  798,  791,
     1551,  802,  822, 1550, 1596, 1549,  790,  826,  823,  817,
      828,  830,  835, 1548,  829, 1547, 1546,  833, 1545, 1596,
      843,  854,  855,  858, 1544, 1543,  856,  859,  868, 1547,
      865, 1541,  862,  401,  839,  893,  873,  870,  896,  876,
      871, 1540,  886,  899, 1539, 1537, 1534,  911, 1531,  902,
      897,  898,  923,  904,  936, 1528, 1525,  938, 1522, 1519,

      934,  940, 1596, 1516, 1513,  900, 1504, 1503,  941, 1501,
     1505,  942,  962,  947,  948,  945,  950,  964, 1499,  968,
      967, 1498,  970, 1497, 1596,  969,  971,  972,  977, 1496,
     1495,  981, 1494, 1492,  987,  998,  996, 1490,  986, 1010,
     1009,  980,  997, 1020, 1022, 1019, 1037, 1489, 1487, 1026,
     1031, 1034, 1032, 1035, 1038,    0, 1491, 1490, 1046, 1025,
     1484, 1047,  155, 1020, 1067, 1041, 1483, 1062, 1067, 1075,
     1055, 1481, 1049, 1079, 1480, 1479, 1066, 1096, 1476, 1475,
     1099, 1472, 1596, 1471, 1469, 1466, 1105, 1464,    0, 1463,
     1109, 1104, 1107, 1108, 1452, 1111, 1337, 1112, 1314, 1123,

     1113, 1116, 1122, 1125, 1154, 1596, 1152, 1136, 1127, 1117,
     1121, 1141, 1134, 1140, 1144, 1149, 1148, 1162, 1164, 1157,
     1175, 1176, 1182, 1171, 1189,    0, 1077, 1187, 1071,  927,
     1158, 1596, 1167, 1164, 1183, 1177, 1202, 1194, 1201, 1203,
     1206, 1225, 1209, 1226, 1217,  863, 1596, 1596,  784,  416,
      780, 1230,  777, 1596,  729, 1596,  631, 1596,  614, 1221,
     1224,  611,  587, 1596, 1596, 1596,  584, 1211,  564, 1596,
     1233, 1247, 1240,  499, 1246, 1249, 1252, 1256,  495, 1253,
     1254,  486,  478, 1266, 1245, 1251, 1240, 1245, 1246,  459,
     1270, 1280, 1282, 1289,  412, 1284, 1293, 1294,  402,  375,

     1295, 1301, 1306, 1596, 1308, 1311, 1313, 1596, 1312,  362,
     1328,  365,  336, 1316, 1329, 1596, 1302, 1305, 1302, 1306,
     1333, 1341, 1331, 1335, 1596,  312, 1355,  299,    0,  295,
     1344, 1357, 1359, 1363, 1378,  289, 1369,  281,    0,  285,
      278, 1371, 1328, 1340, 1345, 1355,  277, 1381, 1380,  254,
      247,  221, 1382, 1387, 1383, 1397, 1596,  190, 1395, 1596,
     1364, 1366, 1596, 1403, 1406,  174, 1408, 1431, 1410, 1596,
     1411, 1388, 1403, 1435, 1433,  173, 1436,  172, 1438, 1412,
     1395,  163, 1455, 1444, 1461, 1596, 1427,  160,  139,  133,
     1596,    0,  125, 1596, 1512, 1515, 1518,  110, 1521, 1524,

       92, 1527, 1530, 1533, 1536, 1539, 1542
    } ;

static yyconst flex_int16_t yy_def[608] =
    {   0,
      594,    1,  595,  595,  594,  594,  594,  594,  594,  596,
      594,  597,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  594,  594,  598,  599,  594,  594,  594,
      594,  596,  594,  597,  594,  594,  594,  594,  600,  594,
      594,  594,  594,  594,  594,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  594,  594,  601,  599,
      594,  594,  594,  600,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  594,  601,  601,  601,  601,  601,
      601,  601,  601,  598,  598,  598,  598,  598,  598,  594,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  602,
      598,  598,  598,  598,  598,  594,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  594,  598,  598,  598,  598,  598,  598,  598,
      603,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  594,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  601,
      601,  601,  601,  601,  601,  601,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  602,  602,  604,  598,  598,
      598,  598,  594,  594,  594,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  594,  598,  598,  598,  598,  598,  603,  603,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  594,  598,  598,  598,  598,
      601,  601,  601,  601,  601,  601,  601,  598,  598,  598,
      598,  598,  598,  598,  598,  604,  604,  598,  598,  598,
      594,  594,  594,  594,  594,  594,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  594,  594,  598,  598,
      598,  598,  598,  594,  598,  594,  598,  594,  598,  598,
      598,  598,  598,  594,  594,  594,  601,  601,  601,  594,
      601,  601,  601,  601,  601,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  594,  594,  594,  594,  594,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  605,  598,

      598,  598,  601,  594,  601,  601,  601,  594,  601,  598,
      598,  606,  598,  598,  598,  594,  594,  594,  594,  594,
      598,  598,  598,  598,  594,  598,  598,  598,  605,  605,
      598,  598,  601,  601,  601,  601,  601,  598,  606,  606,
      598,  598,  594,  594,  594,  594,  598,  598,  598,  598,
      598,  598,  598,  601,  601,  601,  594,  601,  598,  594,
      594,  594,  594,  598,  598,  598,  601,  601,  601,  594,
      598,  594,  594,  598,  598,  601,  601,  601,  598,  594,
      594,  598,  598,  601,  598,  594,  594,  598,  601,  607,
      594,  607,  607,    0,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594
    } ;

static yyconst flex_int16_t yy_nxt[1671] =
    {   0,
        6,    7,    8,    9,   10,    6,    6,   11,   12,   13,
       14,   13,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   30,
       30,   32,   33,   34,   35,   36,   30,   37,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   45,   46,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   30,   32,
       33,   34,   35,   36,   30,   37,   38,   39,   40,   41,
       42,   43,   30,   30,   49,   49,   53,   56,   53,   62,
       63,   58,   50,   50,   59,   65,   60,   57,   61,   65,
       65,  137,  138,   65,  246,   65,   65,   65,   57,   53,

       56,   53,   65,  134,  133,  142,  135,  151,  143,   79,
       57,   74,   66,   80,  137,  138,   57,   81,   75,   65,
       73,   92,   76,   82,   93,   77,  593,   57,   65,   78,
      136,   56,  134,  133,  593,  135,  151,   65,   79,   57,
       74,   57,   80,   67,   68,  470,   81,   75,   73,   92,
       76,   82,   93,   77,   65,   69,  199,   78,  136,   70,
       71,   72,   83,   65,   84,   85,   65,   65,   88,   65,
       57,   86,   67,   68,   87,  431,   89,   65,  245,  466,
       65,   65,   90,   69,  199,   91,   94,   70,   71,   72,
       83,  146,   84,   85,   95,  101,  570,   88,   65,   86,

       65,   65,   87,  102,  431,   89,  107,   65,  108,  103,
       90,   65,   96,   91,  104,   94,   97,  165,  105,  146,
       98,   65,   95,   60,  101,   61,   99,   65,  106,  109,
       65,  100,  102,  110,  107,   57,  108,  103,  148,  111,
      272,   96,  112,  104,  113,   97,  165,  105,  114,   98,
      137,  138,  115,   65,   99,   65,  106,   65,  109,  100,
       65,   65,  110,  116,   57,   65,  148,  111,   65,  272,
      112,  125,   65,  113,   65,  126,   65,  114,  127,   65,
       65,  115,  147,   65,   65,  128,  540,   65,  129,  155,
      152,  116,   65,   65,  188,  557,  530,  139,   65,  154,

      125,  130,   65,  131,  126,   65,  132,  127,  145,  149,
      117,  147,  153,  128,  118,  150,  129,  155,   65,  152,
       65,  119,  120,  188,   65,  121,  122,  154,  123,  130,
      124,  131,  159,   65,  132,  160,  145,   65,  149,  117,
      153,   65,   65,  118,  150,   65,  156,  157,   65,  119,
      120,   65,  158,  121,  122,  177,  123,  209,  124,  166,
      159,  161,  168,  160,  162,  169,  540,  163,   65,  167,
      170,   65,   65,  164,  156,  157,   65,   65,   65,   65,
      158,   65,  171,  177,   65,  209,  178,   65,  166,   65,
      161,  168,  255,  162,  169,  163,  172,  167,   65,  170,

      179,  164,  173,  530,  176,  180,  174,   65,  181,  182,
      171,   65,   65,  175,  192,  178,   65,  499,  525,   65,
      198,  255,   65,   65,  172,  203,  361,  183,  179,  202,
      184,  173,  176,  180,   65,  174,  181,  182,  189,   65,
      185,  175,  192,  186,  187,   65,  190,  219,  198,   65,
      193,   65,  191,  203,  194,  361,  183,  208,  202,  184,
      204,  195,  196,   65,   65,   65,  200,  189,  185,   65,
      197,  186,  187,  210,  190,  219,  201,   65,  205,  193,
      191,  206,   65,  194,   65,   65,  208,  220,  204,  195,
      196,  211,   65,   65,  221,  200,  207,   65,  197,  212,

       65,   65,  210,   65,  201,  508,  205,  224,  225,   65,
      206,  213,  229,   65,  214,   65,  220,  215,  216,  211,
      217,   65,  221,  222,  207,  231,   65,  218,  212,   65,
      223,  230,   65,  234,   65,  224,  225,   65,  233,  213,
      226,  229,  214,   65,  227,  215,  216,   65,  232,  217,
       65,  236,  222,  231,   65,  218,  235,  228,  223,  240,
      230,   65,  234,  237,   65,   65,  233,  238,   65,  226,
      504,   65,  239,  227,  242,  241,  232,   65,  258,   65,
      236,   65,   65,  243,  235,  228,  254,   65,  240,   65,
      466,  237,   65,   65,   65,  238,  244,   65,  256,  259,

      239,  264,  242,  241,  257,  262,  266,  258,  263,  265,
      270,  268,  243,  267,  254,   65,   65,   65,   65,  261,
       65,   65,  282,   65,  244,  245,  256,   65,  259,  264,
      269,   65,  257,  262,  281,  266,  263,   65,  265,  247,
      268,  267,  248,  249,   65,  280,  275,  261,  283,  271,
      282,   65,  250,  284,   65,   65,  276,  251,  252,  269,
      253,   65,  273,  281,   65,   65,  274,  285,  247,  287,
       65,  248,  249,   65,  280,  275,  283,  271,  277,   65,
      250,  284,   65,  278,   65,  251,  252,  291,  253,  288,
      286,  273,   65,  279,   65,  274,  285,   65,  287,   65,

       65,  289,  295,   65,  292,   65,   65,  277,  298,   65,
      290,   65,  278,   65,   65,  293,  291,  288,  286,  294,
      299,  279,   65,  297,   65,  296,  300,  301,  302,  289,
       65,  295,  292,  306,   65,   65,  304,  298,  290,  311,
      305,  309,  308,  293,   65,   65,  307,  310,  294,  299,
       65,   65,  297,  296,  300,   65,  301,  302,  312,   65,
       65,   65,  306,  313,  304,   65,   65,  314,  305,  309,
       65,  308,  316,   65,  307,  325,  310,  318,  320,   65,
       65,   65,   65,   65,  315,  319,   65,  312,  321,   65,
       65,  317,  313,   65,   65,  314,  245,   65,  322,   65,

       65,  316,  324,  323,   65,  330,  318,  320,   65,  326,
      327,  332,  315,  319,  328,  329,  331,  321,  334,  317,
      333,  335,  336,  245,  337,  338,  322,  340,   65,  245,
      324,  323,  245,  330,  245,   65,  245,  326,  327,   65,
      332,  245,  328,  329,  331,   65,  341,  334,  333,   65,
      335,  336,  337,  339,  338,  340,  342,  343,  345,  346,
       65,   65,   65,  348,   65,   65,  358,  349,   65,   65,
      362,   65,  344,  347,   65,  341,   65,   65,  350,   65,
      353,  339,   65,  351,  342,  343,  352,  345,  346,  355,
      360,  348,   65,  366,  276,  367,  349,  359,  362,  354,

      344,  347,   65,   65,   65,   65,   65,  350,   65,  353,
       65,  373,  351,  372,  374,  352,  363,   65,  355,  360,
      368,  364,  366,  375,  367,  359,  377,  354,  381,   65,
      378,  365,  376,   65,  387,  369,  370,  379,  371,  373,
       65,  372,   65,  374,   65,  363,   65,   65,   65,  368,
      364,   65,  375,   65,   65,  377,   65,  381,  378,  365,
      380,  376,  387,  369,  370,  379,  371,  382,   65,  384,
       65,  385,  386,   65,   65,   65,   65,   65,   65,  391,
      388,  393,  392,   65,  395,  394,  245,   65,  380,  396,
      398,  401,   65,   65,  403,  382,  397,  384,  400,  385,

      386,  404,   65,  245,   65,  402,  399,  391,  388,  393,
      410,  392,  395,  394,  405,  245,  245,  396,  407,  398,
      401,  413,  409,  403,  397,  245,  245,  400,  245,  414,
      404,   65,   65,  402,  399,  408,  411,   65,   65,  410,
       65,   65,  405,   65,   65,  432,  407,   65,  412,  413,
      429,  409,   65,   65,  416,   65,  417,  414,  415,  420,
      418,   65,  421,  408,  423,  411,  424,  422,   65,  425,
      428,  430,   65,   65,  432,  419,  412,   65,  427,  429,
      437,   65,  416,  441,  417,   65,  415,  420,  442,  418,
      421,  433,  423,  438,  424,  422,  440,  425,  444,  428,

      430,  443,   65,  419,  439,   65,  434,  435,  437,  436,
       65,   65,  441,   65,   65,   65,  442,   65,   65,   65,
      433,  438,   65,   65,  445,  440,  444,  466,   65,   65,
      443,   65,  439,   65,  434,  435,  446,  436,  449,  450,
      470,  453,  465,  451,  452,  459,  245,  245,  455,  462,
      245,  457,  460,  445,  245,  245,  461,  463,   65,  467,
      464,  468,  471,   65,  446,  469,  449,  450,   65,  453,
       65,  451,  452,  474,  459,  472,  455,   65,  462,  457,
      460,   65,   65,  473,  461,  463,  475,  467,   65,  468,
      476,  471,  477,   65,  469,   65,  478,  485,  486,  479,

       65,  487,  474,  472,  488,  489,  481,   65,   65,   65,
      482,  473,   65,  483,  475,   65,  480,  245,  491,  476,
      484,  477,  490,   65,  478,  485,  486,   65,  479,  487,
       65,   65,   65,  488,  489,  481,   65,  496,  482,  245,
      493,  492,  483,  503,  480,  494,  245,  491,  484,  495,
      497,  490,  245,  245,  500,   65,  498,  512,   65,   65,
       65,  501,   65,  502,  507,  516,  496,  506,  493,  492,
      505,  503,   65,  494,  509,  517,   65,  513,  495,  497,
      518,  510,  519,  500,  498,  520,   65,  514,   65,  501,
       65,  502,  521,  507,  516,   65,  506,  511,  505,   65,

       65,   65,  522,  509,  517,  515,  513,   65,  518,  510,
      519,  524,  245,  520,  245,  514,  523,  245,  245,  245,
      458,  521,   65,  526,  543,  511,  527,  544,  546,  532,
      533,  522,  531,  515,   65,   65,  545,   65,  528,   65,
      524,   65,  534,  456,  523,  536,  537,   65,  535,  542,
       65,  526,  538,  543,  527,  541,  544,  546,  532,  533,
      531,   65,  550,   65,  545,  245,  528,  560,  552,  245,
      534,  549,  547,  536,  537,  245,  535,   65,  542,  561,
      548,  538,  563,  541,  245,  562,   65,   65,   65,  245,
      553,  550,  554,  245,  551,  560,  555,  552,  556,  549,

      547,   65,  558,  245,  572,  573,  566,  561,  548,   65,
      559,  563,   65,  562,  466,  568,  245,   65,  553,  565,
      554,  564,  551,  571,  555,  580,  567,  556,  587,  569,
      558,  581,  572,  573,  575,  566,  586,  245,  559,   65,
      574,   65,  245,  568,   65,  579,  576,  565,  578,  564,
      245,  591,  571,  580,  567,  577,  587,  569,  454,  582,
      581,   65,  590,  575,  390,  586,  583,   65,  574,  584,
       65,  585,  448,  579,  576,  447,  578,   65,   65,  588,
      591,   65,   65,  589,  577,   65,   65,   65,  582,   65,
       65,  427,  357,   65,  583,   65,   65,  584,   65,  585,

      406,   65,   65,   65,   65,   65,  390,   65,  588,   65,
       65,  589,   48,   48,   48,   52,   52,   52,   54,   65,
       54,  140,   65,  140,  144,   65,  144,  356,   65,  356,
      389,   65,  389,  426,  383,  426,  529,   65,  529,  539,
       65,  539,  592,   65,  592,   65,   65,   65,  357,   65,
       65,   65,   65,   65,   65,  245,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,  303,   65,   65,   65,
       65,   65,   65,   65,   65,   65,  260,   65,   65,   65,
      143,  143,   65,   65,   65,   65,   65,   51,  141,   65,
       64,   55,   51,  594,   47,    5,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594
    } ;

static yyconst flex_int16_t yy_chk[1671] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   10,   15,   10,   19,
       19,   16,    3,    4,   16,   42,   17,   15,   17,   24,
       41,   44,   44,   72,  601,   26,   29,   25,   17,   52,

       56,   52,   43,   42,   41,   57,   42,   72,   57,   26,
       56,   25,  598,   26,  137,  137,   15,   26,   25,  101,
       24,   29,   25,   26,   29,   25,  593,   17,   23,   25,
       43,   60,   42,   41,  590,   42,   72,   27,   26,   56,
       25,   60,   26,   23,   23,  589,   26,   25,   24,   29,
       25,   26,   29,   25,   28,   23,  101,   25,   43,   23,
       23,   23,   27,   68,   27,   27,  588,   31,   28,  582,
       60,   27,   23,   23,   27,  363,   28,   35,  578,  576,
      566,   33,   28,   23,  101,   28,   31,   23,   23,   23,
       27,   68,   27,   27,   31,   33,  558,   28,   32,   27,

       34,   82,   27,   33,  363,   28,   35,   70,   35,   33,
       28,   36,   32,   28,   34,   31,   32,   82,   34,   68,
       32,  166,   31,   61,   33,   61,   32,  552,   34,   36,
       37,   32,   33,   36,   35,   61,   35,   33,   70,   36,
      166,   32,   36,   34,   37,   32,   82,   34,   37,   32,
       46,   46,   37,  551,   32,   46,   34,   39,   36,   32,
      550,   76,   36,   37,   61,   69,   70,   36,   75,  166,
       36,   39,   73,   37,   40,   39,   67,   37,   39,   96,
       74,   37,   69,  547,  541,   39,  540,  538,   39,   76,
       73,   37,   38,   71,   96,  536,  530,   46,   78,   75,

       39,   40,   79,   40,   39,  528,   40,   39,   67,   71,
       38,   69,   74,   39,   38,   71,   39,   76,  526,   73,
       77,   38,   38,   96,   90,   38,   38,   75,   38,   40,
       38,   40,   78,  111,   40,   79,   67,   83,   71,   38,
       74,   81,  513,   38,   71,   80,   77,   77,   84,   38,
       38,   85,   77,   38,   38,   90,   38,  111,   38,   83,
       78,   80,   84,   79,   80,   84,  512,   81,  510,   83,
       85,   86,   91,   81,   77,   77,   93,   92,  148,   88,
       77,  500,   85,   90,   87,  111,   91,   98,   83,  100,
       80,   84,  148,   80,   84,   81,   86,   83,  104,   85,

       91,   81,   87,  499,   88,   92,   87,  274,   93,   93,
       85,   95,  103,   87,   98,   91,  116,  450,  495,   97,
      100,  148,  450,  105,   86,  104,  274,   95,   91,  103,
       95,   87,   88,   92,   99,   87,   93,   93,   97,  109,
       95,   87,   98,   95,   95,  106,   97,  116,  100,  102,
       99,  112,   97,  104,   99,  274,   95,  109,  103,   95,
      105,   99,   99,  107,  113,  490,  102,   97,   95,  117,
       99,   95,   95,  112,   97,  116,  102,  120,  106,   99,
       97,  107,  119,   99,  483,  114,  109,  117,  105,   99,
       99,  113,  482,  124,  117,  102,  107,  122,   99,  114,

      115,  479,  112,  118,  102,  474,  106,  119,  120,  123,
      107,  114,  122,  126,  114,  127,  117,  114,  114,  113,
      115,  125,  117,  118,  107,  124,  121,  115,  114,  129,
      118,  123,  128,  127,  130,  119,  120,  132,  126,  114,
      121,  122,  114,  131,  121,  114,  114,  134,  125,  115,
      133,  129,  118,  124,  146,  115,  128,  121,  118,  132,
      123,  135,  127,  129,  152,  136,  126,  130,  157,  121,
      469,  150,  131,  121,  134,  133,  125,  151,  152,  156,
      129,  153,  161,  135,  128,  121,  146,  155,  132,  174,
      467,  129,  160,  463,  159,  130,  136,  162,  150,  153,

      131,  157,  134,  133,  151,  156,  160,  152,  156,  159,
      165,  162,  135,  161,  146,  165,  164,  462,  173,  155,
      459,  176,  174,  175,  136,  139,  150,  172,  153,  157,
      164,  168,  151,  156,  173,  160,  156,  457,  159,  139,
      162,  161,  139,  139,  167,  172,  168,  155,  175,  165,
      174,  178,  139,  176,  180,  181,  169,  139,  139,  164,
      139,  169,  167,  173,  179,  184,  167,  178,  139,  180,
      185,  139,  139,  182,  172,  168,  175,  165,  169,  183,
      139,  176,  186,  169,  188,  139,  139,  184,  139,  181,
      179,  167,  189,  169,  193,  167,  178,  196,  180,  187,

      195,  182,  188,  204,  185,  192,  198,  169,  193,  197,
      183,  207,  169,  206,  210,  186,  184,  181,  179,  187,
      195,  169,  208,  192,  209,  189,  196,  197,  198,  182,
      212,  188,  185,  207,  215,  455,  204,  193,  183,  213,
      206,  210,  209,  186,  213,  214,  208,  212,  187,  195,
      216,  217,  192,  189,  196,  219,  197,  198,  213,  218,
      221,  220,  207,  214,  204,  225,  224,  215,  206,  210,
      226,  209,  217,  227,  208,  228,  212,  219,  221,  229,
      233,  230,  231,  453,  216,  220,  451,  213,  224,  234,
      449,  218,  214,  235,  236,  215,  247,  240,  225,  238,

      237,  217,  227,  226,  239,  233,  219,  221,  242,  228,
      229,  235,  216,  220,  230,  231,  234,  224,  237,  218,
      236,  238,  239,  250,  240,  242,  225,  247,  243,  249,
      227,  226,  248,  233,  251,  255,  252,  228,  229,  258,
      235,  253,  230,  231,  234,  275,  248,  237,  236,  261,
      238,  239,  240,  243,  242,  247,  249,  250,  252,  253,
      262,  263,  267,  258,  264,  268,  271,  261,  273,  446,
      275,  271,  251,  255,  269,  248,  278,  281,  262,  277,
      267,  243,  280,  263,  249,  250,  264,  252,  253,  269,
      273,  258,  283,  277,  276,  278,  261,  271,  275,  268,

      251,  255,  279,  291,  292,  284,  306,  262,  290,  267,
      294,  281,  263,  280,  283,  264,  276,  288,  269,  273,
      279,  276,  277,  284,  278,  271,  290,  268,  294,  293,
      291,  276,  288,  430,  306,  279,  279,  292,  279,  281,
      301,  280,  295,  283,  298,  276,  302,  309,  312,  279,
      276,  316,  284,  314,  315,  290,  317,  294,  291,  276,
      293,  288,  306,  279,  279,  292,  279,  295,  313,  298,
      318,  301,  302,  321,  320,  326,  323,  327,  328,  312,
      309,  314,  313,  329,  316,  315,  342,  332,  293,  317,
      320,  326,  339,  335,  328,  295,  318,  298,  323,  301,

      302,  329,  337,  343,  336,  327,  321,  312,  309,  314,
      339,  313,  316,  315,  332,  341,  340,  317,  335,  320,
      326,  342,  337,  328,  318,  346,  344,  323,  345,  343,
      329,  360,  350,  327,  321,  336,  340,  351,  353,  339,
      352,  354,  332,  347,  355,  364,  335,  366,  341,  342,
      360,  337,  359,  362,  345,  373,  346,  343,  344,  350,
      347,  371,  351,  336,  353,  340,  354,  352,  368,  355,
      359,  362,  377,  369,  364,  347,  341,  429,  427,  360,
      366,  370,  345,  371,  346,  374,  344,  350,  373,  347,
      351,  365,  353,  368,  354,  352,  370,  355,  377,  359,

      362,  374,  378,  347,  369,  381,  365,  365,  366,  365,
      392,  387,  371,  393,  394,  391,  373,  396,  398,  401,
      365,  368,  402,  410,  378,  370,  377,  411,  403,  400,
      374,  404,  369,  409,  365,  365,  381,  365,  387,  391,
      413,  394,  408,  392,  393,  400,  414,  412,  396,  403,
      415,  398,  401,  378,  417,  416,  402,  404,  407,  411,
      405,  411,  413,  420,  381,  412,  387,  391,  418,  394,
      419,  392,  393,  416,  400,  414,  396,  424,  403,  398,
      401,  421,  422,  415,  402,  404,  417,  411,  423,  411,
      418,  413,  419,  428,  412,  425,  420,  431,  433,  421,

      438,  434,  416,  414,  435,  436,  423,  439,  437,  440,
      424,  415,  441,  425,  417,  443,  422,  468,  438,  418,
      428,  419,  437,  445,  420,  431,  433,  460,  421,  434,
      461,  442,  444,  435,  436,  423,  452,  443,  424,  471,
      440,  439,  425,  468,  422,  441,  473,  438,  428,  442,
      444,  437,  475,  472,  452,  476,  445,  478,  477,  480,
      481,  460,  478,  461,  473,  485,  443,  472,  440,  439,
      471,  468,  484,  441,  475,  486,  491,  480,  442,  444,
      487,  476,  488,  452,  445,  489,  492,  481,  493,  460,
      496,  461,  491,  473,  485,  494,  472,  477,  471,  497,

      498,  501,  492,  475,  486,  484,  480,  502,  487,  476,
      488,  494,  503,  489,  505,  481,  493,  506,  509,  507,
      399,  491,  514,  496,  517,  477,  497,  518,  520,  502,
      503,  492,  501,  484,  511,  515,  519,  523,  498,  521,
      494,  524,  505,  397,  493,  507,  509,  522,  506,  515,
      531,  496,  511,  517,  497,  514,  518,  520,  502,  503,
      501,  527,  524,  532,  519,  533,  498,  543,  531,  534,
      505,  523,  521,  507,  509,  537,  506,  542,  515,  544,
      522,  511,  546,  514,  535,  545,  549,  548,  553,  555,
      532,  524,  533,  554,  527,  543,  534,  531,  535,  523,

      521,  559,  537,  556,  561,  562,  553,  544,  522,  564,
      542,  546,  565,  545,  567,  555,  569,  571,  532,  549,
      533,  548,  527,  559,  534,  572,  554,  535,  581,  556,
      537,  573,  561,  562,  565,  553,  580,  568,  542,  575,
      564,  574,  577,  555,  579,  571,  567,  549,  569,  548,
      584,  587,  559,  572,  554,  568,  581,  556,  395,  574,
      573,  583,  585,  565,  390,  580,  575,  585,  564,  577,
      388,  579,  386,  571,  567,  385,  569,  384,  382,  583,
      587,  380,  379,  584,  568,  376,  375,  372,  574,  367,
      361,  358,  357,  349,  575,  348,  338,  577,  334,  579,

      333,  331,  330,  324,  322,  319,  311,  310,  583,  308,
      307,  584,  595,  595,  595,  596,  596,  596,  597,  305,
      597,  599,  304,  599,  600,  300,  600,  602,  299,  602,
      603,  297,  603,  604,  296,  604,  605,  289,  605,  606,
      287,  606,  607,  286,  607,  285,  282,  272,  270,  266,
      265,  259,  257,  256,  254,  246,  244,  241,  232,  223,
      222,  211,  205,  203,  202,  201,  200,  199,  194,  191,
      190,  177,  171,  170,  163,  158,  154,  149,  147,  145,
      143,  142,  110,  108,   94,   89,   66,   51,   50,   30,
       21,   14,    7,    5,    2,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qblex.ll"
/*
    lexcial analize for QBASIC
	Copyright (C) 2009-2010 Thomas Larsen and Pedro Sá.
	Copyright (C) 1995-2005 Marc-Oliver Ihm.
    Copyright (C) 2012  microcai <microcai@fedoraproject.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#line 31 "qblex.ll"

/* Include main header file. */
#include "qbc.h"

/* Get tokens from parser library. */
#include "parser.hpp"

using namespace qb;

typedef parser::semantic_type YYSTYPE;
typedef location YYLTYPE;
typedef parser::token token;

#define error printf
/* Local variables. */
int count = 0;                  /* for strings */

#line 1066 "/home/cai/projects/basic/compiler/qblex.cpp"

#define INITIAL 0
#define block_comment 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

YYSTYPE * yyget_lval (void );

void yyset_lval (YYSTYPE * yylval_param  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param )
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
        YYSTYPE * yylval;
    
#line 55 "qblex.ll"


#line 1261 "/home/cai/projects/basic/compiler/qblex.cpp"

    yylval = yylval_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 595 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1596 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
#line 57 "qblex.ll"
{

   return token::tEOPROG;
   
}
	YY_BREAK
case 1:
YY_RULE_SETUP
#line 63 "qblex.ll"
{
   yylval->separator = 0;
   BEGIN (block_comment);
}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 68 "qblex.ll"
{
   BEGIN (INITIAL);
   return token::tSEPARATOR;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 72 "qblex.ll"
{
   yylval->separator += 1;
}
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 75 "qblex.ll"
{
   error ("block comment not terminated");
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "qblex.ll"
/* eat comment */
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 81 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 86 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "qblex.ll"
/* add to program documentation */ {
 //  add_doc (strdup (""));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "qblex.ll"
/* add to program documentation */ {
   for (count = 1; *yytext != ' ' && *yytext != '\r' && *yytext != '\t' && *yytext != '\f' && *yytext != '\v'; count++) {
      yytext ++;
   }
   yytext ++;
  // add_doc (mystrdup (yytext));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 117 "qblex.ll"
{
   yylval->separator = 1;
   return token::tSEPARATOR;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 122 "qblex.ll"
{  /* handle line continuation */
   yylineno += 1;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "qblex.ll"
{
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "qblex.ll"
/* eat whitespace */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 134 "qblex.ll"
return token::tLONG;/* variables type*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "qblex.ll"
return token::tAS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "qblex.ll"
return token::tARDIM;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "qblex.ll"
return token::tARSIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "qblex.ll"
return token::tBREAK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "qblex.ll"
return token::tCASE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "qblex.ll"
return token::tCOMPILE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "qblex.ll"
return token::tCONTINUE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "qblex.ll"
return token::tCSUB;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "qblex.ll"
return token::tDATA;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 146 "qblex.ll"
return token::tDEC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 147 "qblex.ll"
return token::tDEFAULT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 148 "qblex.ll"
{ printf("got DIM\n");   return token::tDIM;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "qblex.ll"
return token::tDISABLE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 150 "qblex.ll"
return token::tDO;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "qblex.ll"
return token::tELSEIF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "qblex.ll"
return token::tELSE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 153 "qblex.ll"
return token::tENABLE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "qblex.ll"
return token::tENDDATA;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "qblex.ll"
return token::tENDIF;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 156 "qblex.ll"
return token::tENDSTRUCT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 157 "qblex.ll"
return token::tENDSUB;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 158 "qblex.ll"
return token::tSEND;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "qblex.ll"
return token::tEOR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 160 "qblex.ll"
return token::tEXIT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 161 "qblex.ll"
return token::tEXPLICIT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 162 "qblex.ll"
return token::tFOR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 163 "qblex.ll"
return token::tFROM;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 164 "qblex.ll"
return token::tGOSUB;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 165 "qblex.ll"
return token::tGOTO;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 166 "qblex.ll"
return token::tIF;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 167 "qblex.ll"
return token::tINC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 168 "qblex.ll"
return token::tINPUT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 169 "qblex.ll"
return token::tLABEL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 170 "qblex.ll"
return token::tLET;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 171 "qblex.ll"
return token::tLINE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 172 "qblex.ll"
return token::tLOCAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 173 "qblex.ll"
return token::tLOOP;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 174 "qblex.ll"
return token::tNEXT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 175 "qblex.ll"
return token::tPOKE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 176 "qblex.ll"
return token::tPRINT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 177 "qblex.ll"
return token::tREAD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 178 "qblex.ll"
return token::tREPEAT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 179 "qblex.ll"
return token::tRESTORE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 180 "qblex.ll"
return token::tRETURN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 181 "qblex.ll"
return token::tSEEK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 182 "qblex.ll"
return token::tSTATIC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 183 "qblex.ll"
return token::tSTEP;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 184 "qblex.ll"
return token::tSTRUCT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 185 "qblex.ll"
return token::tSUB;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 186 "qblex.ll"
return token::tSWITCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 187 "qblex.ll"
return token::tTHEN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 188 "qblex.ll"
return token::tTO;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 189 "qblex.ll"
return token::tUNTIL;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 190 "qblex.ll"
return token::tUSING;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 191 "qblex.ll"
return token::tWEND;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 192 "qblex.ll"
return token::tWHILE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 194 "qblex.ll"
return token::tABS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 195 "qblex.ll"
return token::tACOS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 196 "qblex.ll"
return token::tASC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 197 "qblex.ll"
return token::tASIN;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 198 "qblex.ll"
return token::tATAN;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 199 "qblex.ll"
return token::tCHR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 200 "qblex.ll"
return token::tCLOSE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 201 "qblex.ll"
return token::tCOS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 202 "qblex.ll"
return token::tEOF;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 203 "qblex.ll"
return token::tEXECUTERETURNNUMBER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 204 "qblex.ll"
return token::tEXECUTERETURNSTRING;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 205 "qblex.ll"
return token::tEXP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 206 "qblex.ll"
return token::tFRAC;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 207 "qblex.ll"
return token::tGLOB;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 208 "qblex.ll"
return token::tINSTR;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 209 "qblex.ll"
return token::tINT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 210 "qblex.ll"
return token::tINT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 211 "qblex.ll"
return token::tLEFT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 212 "qblex.ll"
return token::tLEN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 213 "qblex.ll"
return token::tLOG;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 214 "qblex.ll"
return token::tLOWER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 215 "qblex.ll"
return token::tLTRIM;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 216 "qblex.ll"
return token::tMAX;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 217 "qblex.ll"
return token::tMID;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 218 "qblex.ll"
return token::tMIN;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 219 "qblex.ll"
return token::tOPEN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 220 "qblex.ll"
return token::tPEEK;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 221 "qblex.ll"
return token::tRAN;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 222 "qblex.ll"
return token::tPOW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 223 "qblex.ll"
return token::tRIGHT;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 224 "qblex.ll"
return token::tRINSTR;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 225 "qblex.ll"
return token::tRTRIM;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 226 "qblex.ll"
return token::tSIG;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 227 "qblex.ll"
return token::tSIN;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 228 "qblex.ll"
return token::tSPLIT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 229 "qblex.ll"
return token::tSPLITALT;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "qblex.ll"
return token::tSQR;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 231 "qblex.ll"
return token::tSQRT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 232 "qblex.ll"
return token::tSTR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 233 "qblex.ll"
return token::tSYSTEM;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 234 "qblex.ll"
return token::tTAN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 235 "qblex.ll"
return token::tTELL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 236 "qblex.ll"
return token::tTOKEN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 237 "qblex.ll"
return token::tTOKENALT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 238 "qblex.ll"
return token::tTRIM;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 239 "qblex.ll"
return token::tUPPER;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 240 "qblex.ll"
return token::tVAL;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 242 "qblex.ll"
return token::tAND;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 243 "qblex.ll"
return token::tMOD;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 244 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 245 "qblex.ll"
return token::tOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 246 "qblex.ll"
return token::tEQU;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 247 "qblex.ll"
return token::tGEQ;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 248 "qblex.ll"
return token::tGTN;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 249 "qblex.ll"
return token::tLEQ;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 250 "qblex.ll"
return token::tLTN;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 251 "qblex.ll"
return token::tNEQ;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 252 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 254 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "qblex.ll"
{
   yylval->number = strtod ("inf", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 263 "qblex.ll"
{
   yylval->number = strtod ("nan", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "qblex.ll"
{
   yylval->number = 3.1415926535897932;
   return token::tNUMBER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 273 "qblex.ll"
{
   yylval->number = 2.7182818284590452;
   return token::tNUMBER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 278 "qblex.ll"
{
   yylval->number = 1;
   return token::tNUMBER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 283 "qblex.ll"
{
   yylval->number = 0;
   return token::tNUMBER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 288 "qblex.ll"
{
   return token::tDATE;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 292 "qblex.ll"
{
   return token::tTIME;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 296 "qblex.ll"
{
   return token::tENV;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 300 "qblex.ll"
{
   yylval->symbol = strdup ("__numparam");
   return token::tNUMSYM;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 305 "qblex.ll"
{
   yylval->symbol = strdup (SYSTEM_NAME);
   return token::tSTRING;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 310 "qblex.ll"
{
   yylval->string = strdup (VERSION);
   return token::tSTRING;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "qblex.ll"
{
   return token::tARG;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 319 "qblex.ll"
{
   error ("symbol prefix \"__\" is reserved for internal variables");
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 323 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tNUMSYM;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 328 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tSTRSYM;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 333 "qblex.ll"
{
   yylval->number = strtod (yytext, NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 338 "qblex.ll"
{
   if (yytext[yyleng - 1] == '\n') {
      printf ("string not terminated");
   }
   for (count = 0; yytext[(yyleng - count - 1) - 1] == '\\'; count++);
   if (count % 2) {
      yyless (yyleng - 1);
      yymore ();
   }
   else {
      yylval->string = strdup (yytext + 1);
      *(yylval->string + yyleng - 2) = '\0';
      replace (yylval->string);
      return token::tSTRING;
   }
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 355 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 359 "qblex.ll"
ECHO;
	YY_BREAK
#line 2228 "/home/cai/projects/basic/compiler/qblex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 595 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 595 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 594);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 359 "qblex.ll"



/* Report an error. */
void yyerror (char *msg) {
   /* Report the error. */
   if (*yytext == '\n' || *yytext == '\0') {
      printf ("%s at end of line", msg);
   }
   else {
      printf ("%s at \"%s\"", msg, yytext);
   }

   /* Return. */
   return;
}

/* Replace escape characters. */
char *replace (char *string) {
   char *from, *to, *pointer;
   char *hexdigits = "0123456789abcdef";
   int value;

   /* Initialise. */
   from = string;
   to = string;

   /* Replace. */
   while (*from) {
      if (*from == '\\') {
         from++;
         switch (*from) {
            case 'n':
               *to = '\n';
               break;
            case 't':
               *to = '\t';
               break;
            case 'v':
               *to = '\v';
               break;
            case 'b':
               *to = '\b';
               break;
            case 'r':
               *to = '\r';
               break;
            case 'f':
               *to = '\f';
               break;
            case 'a':
               *to = '\a';
               break;
            case '\\':
               *to = '\\';
               break;
            case '\?':
               *to = '\?';
               break;
            case '\'':
               *to = '\'';
               break;
            case '\"':
               *to = '\"';
               break;
            case 'x':
               value = 0;
               if ((pointer =
                    strchr (hexdigits, tolower (*(from + 1))))
                   && pointer - hexdigits < 16) {
                  from++;
                  value = pointer - hexdigits;
                  if ((pointer =
                       strchr (hexdigits, tolower (*(from + 1))))
                      && pointer - hexdigits < 16) {
                     from++;
                     value *= 16;
                     value += pointer - hexdigits;
                  }
               }
               *to = value;
               break;
            default:
               *to = '\\';
               to++;
               *to = *from;
               break;
         }
      }
      else
         *to = *from;
      from++;
      to++;
   }
   *to = '\0';

   /* Return. */
   return string;
}

