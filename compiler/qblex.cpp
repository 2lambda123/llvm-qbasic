#line 2 "/home/cai/projects/basic/compiler/qblex.cpp"

#line 4 "/home/cai/projects/basic/compiler/qblex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[620] =
    {   0,
        0,    0,    0,    0,  154,  152,   14,   11,  132,  152,
      123,    6,  133,  133,  133,  133,  150,   13,  130,  126,
      128,   56,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  152,  102,  148,    7,    4,    3,    4,
       14,    0,  151,    6,  102,  150,    0,    1,    5,  150,
      150,  129,  131,  127,  149,  148,  148,  148,  148,  148,
       16,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,   29,  148,  148,  148,  148,  148,  148,   34,  148,
      148,  148,  148,  148,   46,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  125,  148,
      136,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,   69,  148,
      148,  148,  148,  148,  148,  148,  148,    0,   12,  147,
        7,    2,    0,  150,    5,   74,  148,  122,  148,   76,
      148,  148,  148,  148,  148,  148,  148,  148,  148,   81,
      148,  148,   25,  148,   27,  148,    9,  148,  148,  148,
       40,   82,   39,  148,  148,  148,   85,  148,   42,  148,
      148,  148,  148,  148,  148,   47,  134,  148,  148,   89,
      148,  148,   92,   50,  148,  148,   93,  148,  148,  148,

      148,   96,  148,   98,  123,  135,  148,  124,  148,  148,
      148,  148,  148,  101,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  106,  107,  148,  110,  148,  148,
      148,   66,  148,  148,  114,  148,  148,  148,  148,  148,
      148,  148,  148,  120,  148,  148,   39,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   75,  148,   77,   78,
      148,  121,   20,   79,  148,  148,  148,  148,   23,   24,
      148,  148,  148,   10,    9,   30,   31,  148,  148,    0,
      148,  148,  148,  148,  148,  148,   40,  148,  148,   86,
       43,  148,   87,  148,   45,  148,  148,  148,  148,  148,

      148,  148,   51,  148,   15,   53,  148,  148,   97,   54,
       99,  148,  100,   55,  148,   57,    8,  148,  148,  148,
      148,  148,  148,  148,   61,  148,  148,  111,  148,   63,
      112,  148,  148,  148,  148,  115,   68,  148,  148,  138,
      148,  148,  148,   72,  148,  147,  147,  147,  147,  147,
      147,  147,  148,   19,   80,  148,  148,  148,  148,  148,
      148,   10,   10,   10,  148,  148,   30,  148,    0,    0,
        0,    0,  148,  148,   34,  148,  148,  148,  148,  137,
      148,  148,  139,  148,   44,  148,  148,   48,   88,  148,
       49,   91,   52,  148,  148,  148,   56,    8,    8,  148,

      148,  148,  148,  148,  148,  148,  148,  108,  148,  148,
      148,  148,  148,  116,  118,   70,  148,   71,   73,  147,
      147,  147,  147,  147,  147,  147,  148,  148,  148,  148,
      148,  148,  148,  148,   10,   10,  148,   30,   32,    0,
        0,   34,    0,    0,    0,    0,  148,  148,  148,  148,
       36,  148,  148,  148,  148,  148,  148,   90,   94,   95,
       32,  148,   58,  148,   60,  103,  104,  105,   67,  109,
       62,   64,  148,   67,  113,  117,  119,  146,  147,  147,
      147,  142,  147,  147,  147,  147,  147,  148,  148,  148,
       21,  148,  148,   26,   28,  148,    0,    0,    0,    0,

       36,    0,   33,  148,  148,  148,  148,  148,   83,  148,
      148,  148,  148,    8,   59,  148,  148,  147,  140,  147,
      147,  147,  141,  147,   17,  148,    8,   22,  148,  148,
       33,    0,    0,    0,    0,    0,  148,  148,  148,  148,
      148,   84,   41,   65,  148,  134,    8,    8,  148,  148,
      147,  147,  147,  147,  147,   18,    8,    8,   25,  148,
        0,    0,    0,    0,    0,  148,   38,   35,  148,   38,
       47,   64,  148,  147,  147,  147,  144,  147,  148,    0,
       38,   35,    0,   38,  148,  148,  148,   66,  147,  147,
      143,  145,  148,    0,    0,    0,   37,  148,  148,  147,

      147,  143,  148,   37,    0,    0,   35,  148,  147,    9,
       35,    0,   36,  147,   10,   36,   10,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       10,   11,   12,   10,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   10,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   30,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[633] =
    {   0,
        0, 1656,   72,   73, 1661, 1663, 1658, 1663, 1663,   74,
     1663,    0, 1663, 1648,   63,   71,   74, 1663,   62, 1663,
     1640, 1663,  122,   83,   91,   89,  131,  157,   90, 1650,
      170,  206,  195,  212,  104,  214,  258,  320,  271,  279,
       84,   79,   96,   90, 1663,  106,    0, 1663, 1663, 1642,
     1653,   97, 1663,    0, 1663,  154,  120, 1663,    0,  156,
      184, 1663, 1663, 1663, 1663, 1647,  173,  194,  198,  176,
      278,  252,  256,  312,  210,  254,  325,  264,  227,  316,
      315,  277,  366,  346,  343,  348,  387,  368, 1646,  286,
      376,  304,  355,  395, 1645,  414,  160,  412,  370,  441,

      406,  113,  396,  403,  408,  399,  263,  448, 1644,  440,
     1643,  400,  450,  453,  478,  479,  454,  494,  500,  489,
      484,  522,  502,  503,  491,  518,  531,  530,  526,  537,
      483,  529,  552,  557,  560,  561,  533,   92, 1663,  616,
        0, 1663, 1634, 1633,    0, 1640,  562, 1639,  566, 1638,
      563,  568,  593,  572,  567, 1637,  579,  575,  591, 1636,
      598,  617,  596,  621, 1635,  626,  646,  589,  650,  638,
      666, 1634, 1633,  647,  628,  645,  656,  658, 1632,  654,
      221,  675,  687,  689,  693,  674,  703,  695,  667,  696,
      692,  686, 1631, 1630,  722,  713, 1629,  704,  707,  730,

      715, 1628, 1627, 1626, 1625, 1624,  711, 1623,  732,  738,
      734,  743,  741, 1622,  735,  770,  755,  742,  746,  750,
      762,  763,  767,  774, 1621, 1620,  776,  778,  779,  788,
      782,  793,  795,  797, 1619,  801,  783,  815,  799,  818,
      809,  823,  820, 1618,  832,  804, 1617, 1663, 1616,  835,
      834,  837,  842,  805,  846,  851, 1615,  850, 1614, 1613,
      855, 1612, 1611, 1663,  863,  867,  861,  873, 1610, 1609,
      872,  859,  874, 1613,  887, 1606,  880,  884,  886,  906,
      891,  896,  908,  915,  906,  909, 1603,  922,  899, 1600,
     1597,  920, 1594,  940, 1591,  942,  936,  926,  947,  950,

      945, 1588, 1585,  961, 1582, 1573,  964,  967, 1663, 1572,
     1571,  972, 1570, 1569,  969, 1568, 1572,  974,  982,  975,
      980,  983,  985,  994, 1566,  992,  999, 1565,  990, 1564,
     1663, 1010, 1001, 1019, 1004, 1563, 1562,  988, 1561, 1560,
     1009, 1007, 1027, 1559, 1024, 1036, 1017, 1040, 1053, 1013,
     1054, 1052, 1067, 1558, 1557, 1059, 1049, 1061, 1063, 1065,
     1068,    0, 1561, 1560, 1077, 1072, 1554, 1082,  270,  360,
      557, 1076, 1092, 1101, 1553, 1081, 1104, 1115, 1097, 1551,
     1122, 1126, 1550, 1136, 1549, 1131, 1139, 1545, 1543, 1133,
     1541, 1663, 1540, 1539, 1538, 1105, 1537,    0, 1537, 1141,

     1143, 1144, 1145, 1527, 1146, 1526, 1147, 1525, 1150, 1149,
     1152, 1167, 1168, 1522, 1663, 1521, 1518, 1517, 1516, 1179,
     1151, 1174, 1162, 1173, 1181, 1170, 1201, 1207, 1209, 1197,
     1178, 1218, 1216, 1220,    0, 1506, 1221, 1478, 1439,  437,
     1043, 1663, 1201, 1196,  885, 1036, 1231, 1235, 1232, 1237,
     1233, 1224, 1243, 1246, 1247, 1260, 1253, 1438, 1663, 1663,
     1362,   99, 1189, 1263, 1184, 1663, 1154, 1663, 1096, 1663,
     1069, 1259, 1256,  935,  807, 1663, 1663, 1663,  806, 1262,
      684, 1663, 1269, 1282, 1266,  657, 1272, 1283, 1273,  248,
      620, 1287, 1291,  619,  606, 1298, 1281, 1285, 1286, 1274,

     1280, 1282,  602, 1302, 1306, 1326, 1319, 1329,  600, 1320,
     1327, 1338, 1332,  575,  524, 1341, 1344, 1349, 1663, 1348,
     1352, 1358, 1663, 1350,  493, 1355,  493,  482, 1356, 1377,
     1663, 1324, 1345, 1352, 1332, 1363, 1364, 1380, 1392, 1369,
     1401, 1663,  476,  429, 1394,  418,    0,  420, 1387, 1399,
     1409, 1410, 1407,  410, 1416,  407,    0,  345,  307, 1414,
     1397, 1385, 1391, 1394, 1408, 1432,  297, 1423, 1430,  290,
      287,  283, 1449, 1433, 1435, 1444, 1663,  281, 1459, 1412,
     1663, 1411, 1429, 1663, 1442, 1472, 1477,  237, 1474, 1482,
     1476, 1663, 1479, 1456, 1453, 1458,  229, 1486, 1487,  211,

     1492,  199, 1493, 1663, 1477, 1475,  180, 1505, 1513,  333,
     1663, 1497,  169,  139,  135, 1663,    0,  125, 1663, 1581,
     1584, 1587,  113, 1590, 1593,  112, 1596, 1599, 1602, 1605,
     1608, 1611
    } ;

static yyconst flex_int16_t yy_def[633] =
    {   0,
      619,    1,  620,  620,  619,  619,  619,  619,  619,  621,
      619,  622,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  619,  619,  623,  624,  619,  619,  619,
      619,  621,  619,  622,  619,  619,  619,  619,  625,  619,
      619,  619,  619,  619,  619,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  619,  619,  626,
      624,  619,  619,  619,  625,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  619,  626,  626,
      626,  626,  626,  626,  626,  626,  623,  623,  623,  623,
      623,  623,  623,  619,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  627,  623,  623,  623,  623,  623,  619,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  619,  623,
      623,  623,  623,  623,  623,  623,  628,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      619,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  626,  626,  626,  626,  626,
      626,  626,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  627,  627,  629,  623,  623,  623,  623,  619,  619,
      619,  619,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  619,  623,  623,  623,  623,  623,  628,  628,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  619,  623,  623,  623,  623,  626,
      626,  626,  626,  626,  626,  626,  623,  623,  623,  623,
      623,  623,  623,  623,  629,  629,  623,  623,  623,  619,
      619,  619,  619,  619,  619,  619,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  619,  619,
      623,  623,  623,  623,  623,  619,  623,  619,  623,  619,
      623,  623,  623,  623,  623,  619,  619,  619,  626,  626,
      626,  619,  626,  626,  626,  626,  626,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  619,  619,  619,  619,

      619,  619,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  630,  623,  623,  623,  626,  619,  626,
      626,  626,  619,  626,  623,  623,  631,  623,  623,  623,
      619,  619,  619,  619,  619,  619,  623,  623,  623,  623,
      623,  619,  623,  623,  623,  623,  630,  630,  623,  623,
      626,  626,  626,  626,  626,  623,  631,  631,  623,  623,
      619,  619,  619,  619,  619,  623,  623,  623,  623,  623,
      623,  623,  623,  626,  626,  626,  619,  626,  623,  619,
      619,  619,  619,  619,  623,  623,  623,  623,  626,  626,
      626,  619,  623,  619,  619,  619,  623,  623,  623,  626,

      626,  626,  623,  619,  619,  619,  623,  623,  626,  623,
      619,  619,  623,  626,  632,  619,  632,  632,    0,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619
    } ;

static yyconst flex_int16_t yy_nxt[1738] =
    {   0,
        6,    7,    8,    9,   10,    6,    6,   11,   12,   13,
       14,   13,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   30,
       30,   32,   33,   34,   35,   36,   30,   37,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   45,   46,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   30,   32,
       33,   34,   35,   36,   30,   37,   38,   39,   40,   41,
       42,   43,   30,   30,   49,   49,   53,   56,   53,   62,
       63,   58,   50,   50,   59,   65,   60,   57,   61,   65,
       65,  138,  139,  138,  139,   65,   65,   65,   57,   53,

      514,   53,   65,  135,  134,   65,  136,  138,  139,   79,
       65,   74,   65,   80,  249,   66,   57,   81,   75,   65,
       73,   93,   76,   82,   94,   77,  618,   57,   65,   78,
      137,  143,  135,  134,  144,  136,  618,   65,   79,  108,
       74,  109,   80,   67,   68,  482,   81,   75,   73,   93,
       76,   82,   94,   77,  140,   69,  202,   78,  137,   70,
       71,   72,   83,   65,   84,   85,   65,  108,   56,  109,
       56,   86,   67,   68,   87,   65,   65,   88,   57,   65,
       57,  191,   65,   69,  202,   89,   65,   70,   71,   72,
       83,   90,   84,   85,   91,   95,   60,   92,   61,   86,

       65,   65,   87,   96,   65,  248,   88,   57,   57,   57,
      191,  146,   65,  149,   89,  102,   65,  478,   65,   90,
       65,  148,   91,  103,   95,   92,   97,   65,  147,  104,
       98,   96,  105,   65,   99,   65,  106,   57,  110,  146,
      100,  149,  111,   65,  102,  101,  107,  156,  112,  527,
      148,  113,  103,  291,   65,   97,  147,  104,   65,   98,
       65,  105,   65,   99,   65,  106,  162,  110,  100,   65,
       65,  111,  152,  101,  107,  156,  112,   65,  114,  113,
      153,  291,  115,   65,   65,   65,  116,  592,  157,   65,
      440,  126,   65,   65,  162,  127,   65,  117,  128,  167,

      150,  152,  208,   65,  161,  129,  151,  114,  130,  153,
       65,  115,  131,   65,  132,  116,  157,  133,   65,  440,
      126,   65,   65,  179,  127,  117,   65,  128,  167,  150,
      208,   65,  161,  129,  615,  151,  130,  182,  163,   65,
      131,  164,  132,  154,  118,  133,  558,  165,  119,   65,
      155,  179,   65,  166,   65,  120,  121,  158,  159,  122,
      123,   65,  124,  160,  125,  182,  170,  163,  172,  171,
      164,  154,   65,  118,   65,  165,   65,  119,  155,  174,
      173,  166,   65,  120,  121,  158,  159,  122,  123,  183,
      124,  160,  125,   65,  168,  170,  180,  172,  171,  178,

      441,   65,   65,  195,  169,   65,   65,  174,  173,   65,
      181,  175,   65,   65,   65,  176,  577,  183,   65,  203,
       65,  548,  177,  168,   65,  180,  205,  178,  441,  204,
      212,  195,  169,  184,  185,   65,  186,  192,  181,  187,
      175,  206,  207,  201,  176,  193,   65,   65,  203,  188,
      177,  194,  189,  190,   65,  205,   65,  204,  212,   65,
       65,  184,  185,  196,  211,  186,  192,  197,  187,  206,
      207,  201,  209,  193,  198,  199,  497,  188,  213,  194,
      189,  190,   65,  200,   65,   65,  214,  210,   65,   65,
       65,  222,  196,  211,  558,   65,  197,   65,  215,   65,

       65,  209,  198,  199,  497,  220,   65,  213,   65,   65,
      216,  200,  221,  217,  214,  210,  218,  219,  223,  222,
      227,  228,  241,  232,   65,  224,  225,  215,   65,  234,
       65,  233,   65,  226,  220,   65,   65,   65,  216,   65,
      221,  217,  229,   65,  218,  219,  230,  223,  227,  228,
      241,  235,  232,  224,  237,  225,  238,  234,   65,  231,
      233,  226,  236,   65,  242,  239,   65,   65,   65,   65,
      247,  229,   65,   65,   65,  230,  548,  240,   65,  235,
      243,   65,  442,  237,  238,   65,  258,  231,  244,  246,
      236,  263,  242,  245,  239,   65,  259,   65,  247,   65,

      257,  260,   65,  262,   65,  240,  542,  266,   65,  243,
      267,  442,   65,  261,  276,  258,  244,  265,  246,  269,
      263,  245,  248,   65,  259,   65,   65,   65,  257,  260,
      268,  262,   65,  271,   65,  266,  250,  270,  267,  251,
      252,  272,  261,  276,   65,  265,  273,  274,  269,  253,
      286,   65,   65,   65,  254,  255,   65,  256,  268,  279,
       65,  271,   65,  523,   65,  250,  270,  280,  251,  252,
      272,  285,   65,   65,  277,  273,  290,  253,  278,  286,
       65,   65,  254,  255,  287,  256,  275,  288,  279,  281,
      519,  282,   65,   65,  283,   65,  289,  292,   65,   65,

      285,   65,   65,  277,  284,  290,  299,  278,  293,   65,
       65,  296,  287,   65,  275,  288,  301,   65,  281,   65,
      282,   65,  300,  283,  289,  302,  292,  295,   65,  294,
      305,  297,  284,  304,  299,  298,   65,  293,   65,  296,
       65,   65,  306,  308,   65,  301,  303,   65,   65,   65,
      310,  300,   65,  302,  307,  295,   65,  294,  316,  305,
      297,   65,  304,  298,  313,  311,  312,  314,   65,   65,
      306,  317,  308,   65,  315,  303,   65,  322,  310,  319,
       65,  320,   65,  307,   65,   65,  321,  316,  331,   65,
      318,  324,  313,  311,   65,  312,  314,  325,  326,   65,

      323,   65,  315,   65,  327,   65,  322,   65,  319,  320,
       65,  248,  478,   65,  321,   65,  337,  328,  329,  318,
      324,   65,  332,  330,   65,  325,   65,  326,  323,   65,
      333,  339,  336,  327,  334,  345,  335,  341,   65,  338,
      248,  248,  340,  248,  337,  328,  329,  342,  248,  350,
      332,  330,  248,  343,  347,  344,   65,  248,  333,  339,
      336,   65,  334,  345,  335,   65,  341,   65,  338,   65,
      348,  340,  346,   65,  351,  352,  342,  350,   65,   65,
       65,  343,  349,  347,  344,  354,   65,  355,  364,  357,
       65,  356,   65,   65,  353,  361,  359,   65,  348,  360,

      346,  358,   65,  351,  352,   65,  501,  280,  366,  367,
      349,  373,   65,  354,   65,   65,  355,  368,  357,  365,
      356,   65,  353,  383,  361,  359,   65,  360,   65,  369,
      358,  370,   65,  375,  371,  501,  374,  366,  367,  376,
      373,   65,   65,  380,  372,  368,   65,  365,   65,  381,
      382,   65,  383,   65,  377,  378,   65,  379,  369,  384,
      370,  385,  375,  371,  374,  388,  386,   65,  376,  387,
       65,  380,  372,   65,  390,   65,  391,  381,   65,  382,
       65,   65,  377,  378,  389,  379,   65,  384,   65,   65,
      385,   65,  393,  388,   65,  386,   65,  387,   65,  395,

       65,  394,  401,  390,  391,   65,  396,   65,  397,  402,
       65,  400,  389,   65,  407,   65,   65,  403,  409,  248,
      393,  414,  404,  248,  405,   65,  406,  395,  413,  394,
       65,  401,  410,   65,  396,  411,  397,  402,  408,  400,
      416,  412,  248,  407,  417,  403,  248,  409,  419,  414,
      404,  424,  405,  418,  406,   65,  421,  413,  248,  248,
      248,  410,  420,  411,  502,   65,  408,   65,  416,   65,
      412,   65,  417,   65,   65,   65,  498,  419,   65,  424,
      430,  422,  418,   65,  421,  423,  425,   65,   65,  426,
      427,  420,  429,  502,  431,  432,  433,  438,   65,  434,

      443,  437,   65,   65,  498,  428,  439,   65,  430,  422,
       65,   65,  449,  423,  425,  444,  445,  426,  446,  427,
      429,   65,  431,  432,  433,  452,  438,  434,   65,  443,
      437,  447,   65,  428,  448,  439,  451,   65,  461,   65,
      449,  450,   65,  444,  445,   65,  446,   65,  454,   65,
       65,   65,   65,   65,  452,   65,   65,  248,   65,  447,
       65,  453,  448,  456,  455,  451,  461,  457,  248,  450,
      458,  462,  471,   65,   65,  481,  248,  454,  465,  248,
      482,  464,  463,  467,   65,  478,  469,  248,  472,  453,
       65,  456,  473,  455,  474,   65,  457,  484,  458,  462,

      475,  471,  483,   65,  481,  486,  465,   65,  487,  464,
      463,  467,  485,   65,  469,   65,  472,  479,  492,  480,
      473,  491,   65,  474,   65,  484,   65,   65,  475,  488,
       65,  483,  499,  500,  486,  489,  487,   65,   65,   65,
      485,   65,  493,   65,  495,  479,  492,  480,  490,   65,
      491,  503,   65,   65,  496,  494,  505,  504,  488,   65,
      499,  500,   65,  508,  489,   65,   65,  509,  248,   65,
      507,  493,  248,  495,  510,  248,  490,  506,  248,   65,
      503,  511,  496,  494,  512,  505,  504,  515,  248,   65,
      522,  508,  513,   65,  518,  517,  509,   65,  507,  516,

      524,  531,  521,  510,   65,  506,  520,  532,   65,  511,
      533,  528,   65,  512,  534,  525,  515,  535,  526,  522,
      513,  536,  518,  517,  529,   65,   65,  516,  538,  524,
      531,  521,   65,   65,  520,   65,  532,  530,   65,  533,
      528,  537,  534,  525,   65,  535,  526,   65,  539,  536,
       65,  541,  529,  540,  248,  248,  248,  538,  248,  543,
      544,   65,   65,  561,  248,  530,  564,  562,   65,  537,
       65,  545,  550,  551,  563,   65,  546,  539,  549,  556,
      541,  540,  552,   65,  555,  565,   65,  543,  544,  553,
      554,  561,  566,   65,  564,  559,  562,  560,   65,  545,

       65,  550,  551,  563,  546,   65,  549,   65,  556,  569,
      552,  572,  555,  248,  565,  248,  248,  553,  554,  567,
       65,  566,  248,  559,  581,  580,  560,  576,  570,   65,
      582,  568,  573,  571,  583,  584,   65,  569,   65,  248,
      572,  248,  574,  575,   65,   65,  594,  567,   65,  578,
      248,  595,  581,  579,  580,   65,  576,  570,  582,  568,
      573,  571,  583,  586,  584,   65,  585,  590,  596,  587,
      574,  575,  589,  588,  594,  597,  591,  578,   65,  595,
      478,  579,  248,   65,   65,   65,  606,  593,  248,  604,
      605,  586,   65,   65,  585,  590,  596,  587,  248,   65,

      589,  611,  588,  597,  591,  599,  601,  436,  612,  598,
      607,   65,  600,  603,  602,  606,  593,  604,  605,  248,
      608,  616,   65,   65,  477,  609,  610,   65,  476,  613,
      611,  470,  468,  466,  599,  601,  612,  598,  399,  607,
      600,  603,  602,   65,  460,  459,   65,   65,  608,   65,
      616,   65,  614,  609,  610,   65,   65,   65,  613,   65,
       65,  436,  363,   65,   65,   65,   65,  415,   65,   65,
       65,   65,   65,  399,   65,   65,   65,   65,   65,   65,
      614,   48,   48,   48,   52,   52,   52,   54,   65,   54,
      141,   65,  141,  145,  392,  145,  362,   65,  362,  398,

       65,  398,  435,   65,  435,  547,   65,  547,  557,   65,
      557,  617,   65,  617,  363,   65,   65,   65,   65,   65,
       65,   65,  248,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  309,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  264,   65,   65,   65,  144,  144,   65,
       65,   65,   65,   65,   51,  142,   65,   64,   55,   51,
      619,   47,    5,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619
    } ;

static yyconst flex_int16_t yy_chk[1738] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   10,   15,   10,   19,
       19,   16,    3,    4,   16,   42,   17,   15,   17,   24,
       41,   44,   44,  138,  138,   26,   29,   25,   17,   52,

      462,   52,   43,   42,   41,  462,   42,   46,   46,   26,
       35,   25,   46,   26,  626,  623,   15,   26,   25,  102,
       24,   29,   25,   26,   29,   25,  618,   17,   23,   25,
       43,   57,   42,   41,   57,   42,  615,   27,   26,   35,
       25,   35,   26,   23,   23,  614,   26,   25,   24,   29,
       25,   26,   29,   25,   46,   23,  102,   25,   43,   23,
       23,   23,   27,   28,   27,   27,   97,   35,   56,   35,
       60,   27,   23,   23,   27,  613,   31,   28,   56,   67,
       60,   97,   70,   23,  102,   28,  607,   23,   23,   23,
       27,   28,   27,   27,   28,   31,   61,   28,   61,   27,

       68,   33,   27,   31,   69,  602,   28,   56,   61,   60,
       97,   67,   32,   70,   28,   33,   75,  600,   34,   28,
       36,   69,   28,   33,   31,   28,   32,  181,   68,   33,
       32,   31,   34,   79,   32,  597,   34,   61,   36,   67,
       32,   70,   36,  588,   33,   32,   34,   75,   36,  490,
       69,   36,   33,  181,  490,   32,   68,   33,   72,   32,
       76,   34,   73,   32,   37,   34,   79,   36,   32,  107,
       78,   36,   72,   32,   34,   75,   36,   39,   37,   36,
       73,  181,   37,   82,   71,   40,   37,  578,   76,  572,
      369,   39,   90,  571,   79,   39,  570,   37,   39,   82,

       71,   72,  107,  567,   78,   39,   71,   37,   39,   73,
       92,   37,   40,  559,   40,   37,   76,   40,   74,  369,
       39,   81,   80,   90,   39,   37,   38,   39,   82,   71,
      107,   77,   78,   39,  610,   71,   39,   92,   80,  610,
       40,   80,   40,   74,   38,   40,  558,   81,   38,   85,
       74,   90,   84,   81,   86,   38,   38,   77,   77,   38,
       38,   93,   38,   77,   38,   92,   84,   80,   85,   84,
       80,   74,   83,   38,   88,   81,   99,   38,   74,   86,
       85,   81,   91,   38,   38,   77,   77,   38,   38,   93,
       38,   77,   38,   87,   83,   84,   91,   85,   84,   88,

      370,   94,  103,   99,   83,  106,  112,   86,   85,  104,
       91,   87,  101,  556,  105,   87,  554,   93,   98,  103,
       96,  548,   87,   83,  546,   91,  104,   88,  370,  103,
      112,   99,   83,   94,   94,  544,   96,   98,   91,   96,
       87,  105,  106,  101,   87,   98,  110,  100,  103,   96,
       87,   98,   96,   96,  108,  104,  113,  103,  112,  114,
      117,   94,   94,  100,  110,   96,   98,  100,   96,  105,
      106,  101,  108,   98,  100,  100,  440,   96,  113,   98,
       96,   96,  543,  100,  115,  116,  114,  108,  528,  131,
      121,  117,  100,  110,  527,  120,  100,  125,  115,  525,

      118,  108,  100,  100,  440,  116,  119,  113,  123,  124,
      115,  100,  116,  115,  114,  108,  115,  115,  118,  117,
      120,  121,  131,  123,  126,  118,  119,  115,  122,  125,
      515,  124,  129,  119,  116,  132,  128,  127,  115,  137,
      116,  115,  122,  130,  115,  115,  122,  118,  120,  121,
      131,  126,  123,  118,  128,  119,  129,  125,  133,  122,
      124,  119,  127,  134,  132,  130,  135,  136,  147,  151,
      137,  122,  149,  155,  152,  122,  514,  130,  154,  126,
      133,  158,  371,  128,  129,  157,  149,  122,  134,  136,
      127,  155,  132,  135,  130,  168,  151,  159,  137,  153,

      147,  152,  163,  154,  161,  130,  509,  158,  503,  133,
      158,  371,  495,  153,  168,  149,  134,  157,  136,  161,
      155,  135,  140,  162,  151,  494,  491,  164,  147,  152,
      159,  154,  166,  163,  175,  158,  140,  162,  158,  140,
      140,  164,  153,  168,  170,  157,  166,  167,  161,  140,
      175,  176,  167,  174,  140,  140,  169,  140,  159,  170,
      180,  163,  177,  486,  178,  140,  162,  171,  140,  140,
      164,  174,  171,  189,  169,  166,  180,  140,  169,  175,
      186,  182,  140,  140,  176,  140,  167,  177,  170,  171,
      481,  171,  192,  183,  171,  184,  178,  182,  191,  185,

      174,  188,  190,  169,  171,  180,  189,  169,  183,  187,
      198,  186,  176,  199,  167,  177,  191,  207,  171,  196,
      171,  201,  190,  171,  178,  192,  182,  185,  195,  184,
      198,  187,  171,  196,  189,  188,  200,  183,  209,  186,
      211,  215,  199,  201,  210,  191,  195,  213,  218,  212,
      207,  190,  219,  192,  200,  185,  220,  184,  215,  198,
      187,  217,  196,  188,  211,  209,  210,  212,  221,  222,
      199,  216,  201,  223,  213,  195,  216,  220,  207,  217,
      224,  218,  227,  200,  228,  229,  219,  215,  231,  237,
      216,  222,  211,  209,  230,  210,  212,  223,  224,  232,

      221,  233,  213,  234,  227,  239,  220,  236,  217,  218,
      246,  254,  479,  475,  219,  241,  237,  228,  229,  216,
      222,  238,  231,  230,  240,  223,  243,  224,  221,  242,
      232,  239,  236,  227,  233,  246,  234,  241,  245,  238,
      251,  250,  240,  252,  237,  228,  229,  242,  253,  254,
      231,  230,  255,  243,  251,  245,  258,  256,  232,  239,
      236,  261,  233,  246,  234,  272,  241,  267,  238,  265,
      252,  240,  250,  266,  255,  256,  242,  254,  271,  268,
      273,  243,  253,  251,  245,  261,  277,  265,  275,  267,
      278,  266,  279,  275,  258,  273,  271,  281,  252,  272,

      250,  268,  282,  255,  256,  289,  445,  280,  277,  278,
      253,  281,  285,  261,  283,  286,  265,  279,  267,  275,
      266,  284,  258,  289,  273,  271,  292,  272,  288,  280,
      268,  280,  298,  283,  280,  445,  282,  277,  278,  284,
      281,  474,  297,  285,  280,  279,  294,  275,  296,  286,
      288,  301,  289,  299,  284,  284,  300,  284,  280,  292,
      280,  294,  283,  280,  282,  298,  296,  304,  284,  297,
      307,  285,  280,  308,  300,  315,  301,  286,  312,  288,
      318,  320,  284,  284,  299,  284,  321,  292,  319,  322,
      294,  323,  304,  298,  338,  296,  329,  297,  326,  308,

      324,  307,  319,  300,  301,  327,  312,  333,  315,  320,
      335,  318,  299,  342,  326,  341,  332,  321,  329,  350,
      304,  338,  322,  347,  323,  334,  324,  308,  335,  307,
      345,  319,  332,  343,  312,  333,  315,  320,  327,  318,
      341,  334,  346,  326,  342,  321,  348,  329,  345,  338,
      322,  350,  323,  343,  324,  357,  347,  335,  352,  349,
      351,  332,  346,  333,  446,  356,  327,  358,  341,  359,
      334,  360,  342,  353,  361,  471,  441,  345,  366,  350,
      357,  348,  343,  365,  347,  349,  351,  376,  368,  352,
      353,  346,  356,  446,  358,  359,  360,  366,  373,  361,

      372,  365,  469,  379,  441,  353,  368,  374,  357,  348,
      377,  396,  376,  349,  351,  372,  372,  352,  372,  353,
      356,  378,  358,  359,  360,  379,  366,  361,  381,  372,
      365,  373,  382,  353,  374,  368,  378,  386,  396,  390,
      376,  377,  384,  372,  372,  387,  372,  400,  382,  401,
      402,  403,  405,  407,  379,  410,  409,  421,  411,  373,
      467,  381,  374,  386,  384,  378,  396,  387,  423,  377,
      390,  400,  409,  412,  413,  421,  426,  382,  403,  424,
      422,  402,  401,  405,  431,  420,  407,  425,  410,  381,
      465,  386,  411,  384,  412,  463,  387,  423,  390,  400,

      413,  409,  422,  430,  421,  425,  403,  427,  426,  402,
      401,  405,  424,  428,  407,  429,  410,  420,  431,  420,
      411,  430,  433,  412,  432,  423,  434,  437,  413,  427,
      452,  422,  443,  444,  425,  428,  426,  447,  449,  451,
      424,  448,  432,  450,  434,  420,  431,  420,  429,  453,
      430,  447,  454,  455,  437,  433,  449,  448,  427,  457,
      443,  444,  473,  452,  428,  472,  456,  453,  480,  464,
      451,  432,  485,  434,  454,  483,  429,  450,  487,  489,
      447,  455,  437,  433,  456,  449,  448,  464,  484,  488,
      485,  452,  457,  492,  480,  473,  453,  493,  451,  472,

      487,  497,  484,  454,  496,  450,  483,  498,  504,  455,
      499,  492,  505,  456,  500,  488,  464,  501,  489,  485,
      457,  502,  480,  473,  493,  507,  510,  472,  505,  487,
      497,  484,  506,  511,  483,  508,  498,  496,  513,  499,
      492,  504,  500,  488,  512,  501,  489,  516,  506,  502,
      517,  508,  493,  507,  520,  518,  524,  505,  521,  510,
      511,  526,  529,  532,  522,  496,  535,  533,  461,  504,
      537,  512,  517,  518,  534,  540,  513,  506,  516,  526,
      508,  507,  520,  530,  524,  536,  538,  510,  511,  521,
      522,  532,  537,  549,  535,  529,  533,  530,  539,  512,

      545,  517,  518,  534,  513,  550,  516,  541,  526,  540,
      520,  549,  524,  553,  536,  551,  552,  521,  522,  538,
      560,  537,  555,  529,  562,  561,  530,  553,  541,  568,
      563,  539,  550,  545,  564,  565,  569,  540,  566,  574,
      549,  575,  551,  552,  458,  439,  580,  538,  585,  555,
      576,  582,  562,  560,  561,  573,  553,  541,  563,  539,
      550,  545,  564,  568,  565,  579,  566,  575,  583,  569,
      551,  552,  574,  573,  580,  585,  576,  555,  586,  582,
      589,  560,  591,  587,  438,  593,  596,  579,  590,  594,
      595,  568,  598,  599,  566,  575,  583,  569,  601,  603,

      574,  605,  573,  585,  576,  587,  590,  436,  606,  586,
      598,  608,  589,  593,  591,  596,  579,  594,  595,  609,
      599,  612,  419,  418,  417,  601,  603,  416,  414,  608,
      605,  408,  406,  404,  587,  590,  606,  586,  399,  598,
      589,  593,  591,  397,  395,  394,  393,  391,  599,  389,
      612,  388,  609,  601,  603,  385,  383,  380,  608,  375,
      367,  364,  363,  355,  354,  344,  340,  339,  337,  336,
      330,  328,  325,  317,  316,  314,  313,  311,  310,  306,
      609,  620,  620,  620,  621,  621,  621,  622,  305,  622,
      624,  303,  624,  625,  302,  625,  627,  295,  627,  628,

      293,  628,  629,  291,  629,  630,  290,  630,  631,  287,
      631,  632,  276,  632,  274,  270,  269,  263,  262,  260,
      259,  257,  249,  247,  244,  235,  226,  225,  214,  208,
      206,  205,  204,  203,  202,  197,  194,  193,  179,  173,
      172,  165,  160,  156,  150,  148,  146,  144,  143,  111,
      109,   95,   89,   66,   51,   50,   30,   21,   14,    7,
        5,    2,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qblex.ll"
/*
    lexcial analize for QBASIC
	Copyright (C) 2009-2010 Thomas Larsen and Pedro Sá.
	Copyright (C) 1995-2005 Marc-Oliver Ihm.
    Copyright (C) 2012  microcai <microcai@fedoraproject.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#line 31 "qblex.ll"

/* Include main header file. */
#include "qbc.h"

/* Get tokens from parser library. */
#include "parser.hpp"

using namespace qb;

typedef parser::semantic_type YYSTYPE;
typedef location YYLTYPE;
typedef parser::token token;

#define error printf
/* Local variables. */
int count = 0;                  /* for strings */

#line 1090 "/home/cai/projects/basic/compiler/qblex.cpp"

#define INITIAL 0
#define block_comment 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

YYSTYPE * yyget_lval (void );

void yyset_lval (YYSTYPE * yylval_param  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param )
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
        YYSTYPE * yylval;
    
#line 55 "qblex.ll"


#line 1285 "/home/cai/projects/basic/compiler/qblex.cpp"

    yylval = yylval_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 620 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1663 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
#line 57 "qblex.ll"
{

   return token::tEOPROG;
   
}
	YY_BREAK
case 1:
YY_RULE_SETUP
#line 63 "qblex.ll"
{
   yylval->separator = 0;
   BEGIN (block_comment);
}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 68 "qblex.ll"
{
   BEGIN (INITIAL);
   return token::tSEPARATOR;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 72 "qblex.ll"
{
   yylval->separator += 1;
}
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 75 "qblex.ll"
{
   error ("block comment not terminated");
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "qblex.ll"
/* eat comment */
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 81 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 86 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "qblex.ll"
/* eat comment */ {
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "qblex.ll"
/* add to program documentation */ {
 //  add_doc (strdup (""));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "qblex.ll"
/* add to program documentation */ {
   for (count = 1; *yytext != ' ' && *yytext != '\r' && *yytext != '\t' && *yytext != '\f' && *yytext != '\v'; count++) {
      yytext ++;
   }
   yytext ++;
  // add_doc (mystrdup (yytext));
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 117 "qblex.ll"
{
   yylval->separator = 1;
   return token::tSEPARATOR;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 122 "qblex.ll"
{  /* handle line continuation */
   yylineno += 1;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "qblex.ll"
{
   yylval->separator = 0;
   return token::tSEPARATOR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "qblex.ll"
/* eat whitespace */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 134 "qblex.ll"
return token::tLONG;/* variables type*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "qblex.ll"
return token::tAS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "qblex.ll"
return token::tARDIM;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "qblex.ll"
return token::tARSIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "qblex.ll"
return token::tBREAK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "qblex.ll"
return token::tCASE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "qblex.ll"
return token::tCOMPILE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "qblex.ll"
return token::tCONTINUE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "qblex.ll"
return token::tCSUB;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "qblex.ll"
return token::tDATA;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 146 "qblex.ll"
return token::tDEC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 147 "qblex.ll"
return token::tDEFAULT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 148 "qblex.ll"
{ printf("got DIM\n");   return token::tDIM;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "qblex.ll"
return token::tDISABLE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 150 "qblex.ll"
return token::tDO;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "qblex.ll"
return token::tELSEIF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "qblex.ll"
return token::tELSE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 153 "qblex.ll"
return token::tENABLE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "qblex.ll"
return token::tENDDATA;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "qblex.ll"
return token::tENDIF;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 156 "qblex.ll"
return token::tENDSTRUCT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 157 "qblex.ll"
return token::tENDSUB;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 158 "qblex.ll"
return token::tENDFUNCTION;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 160 "qblex.ll"
return token::tSEND;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 161 "qblex.ll"
return token::tEOR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 162 "qblex.ll"
return token::tEXIT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 163 "qblex.ll"
return token::tEXPLICIT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 164 "qblex.ll"
return token::tFOR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 165 "qblex.ll"
return token::tFROM;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 166 "qblex.ll"
return token::tGOSUB;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 167 "qblex.ll"
return token::tGOTO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 168 "qblex.ll"
return token::tIF;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 169 "qblex.ll"
return token::tINC;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "qblex.ll"
return token::tINPUT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "qblex.ll"
return token::tLABEL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 172 "qblex.ll"
return token::tLET;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "qblex.ll"
return token::tLINE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 174 "qblex.ll"
return token::tLOCAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 175 "qblex.ll"
return token::tLOOP;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 176 "qblex.ll"
return token::tNEXT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "qblex.ll"
return token::tPOKE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "qblex.ll"
return token::tPRINT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 179 "qblex.ll"
return token::tREAD;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 180 "qblex.ll"
return token::tREPEAT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 181 "qblex.ll"
return token::tRESTORE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 182 "qblex.ll"
return token::tRETURN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 183 "qblex.ll"
return token::tSEEK;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 184 "qblex.ll"
return token::tSTATIC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 185 "qblex.ll"
return token::tSTEP;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 186 "qblex.ll"
return token::tSTRUCT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 187 "qblex.ll"
return token::tFUNCTION;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 188 "qblex.ll"
return token::tSUB;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 189 "qblex.ll"
return token::tSWITCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 190 "qblex.ll"
return token::tTHEN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 191 "qblex.ll"
return token::tTO;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 192 "qblex.ll"
return token::tUNTIL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 193 "qblex.ll"
return token::tUSING;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 194 "qblex.ll"
return token::tWEND;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 195 "qblex.ll"
return token::tWHILE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 197 "qblex.ll"
return token::tABS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 198 "qblex.ll"
return token::tACOS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 199 "qblex.ll"
return token::tASC;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 200 "qblex.ll"
return token::tASIN;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 201 "qblex.ll"
return token::tATAN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 202 "qblex.ll"
return token::tCHR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 203 "qblex.ll"
return token::tCLOSE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 204 "qblex.ll"
return token::tCOS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 205 "qblex.ll"
return token::tEOF;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 206 "qblex.ll"
return token::tEXECUTERETURNNUMBER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 207 "qblex.ll"
return token::tEXECUTERETURNSTRING;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 208 "qblex.ll"
return token::tEXP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 209 "qblex.ll"
return token::tFRAC;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 210 "qblex.ll"
return token::tGLOB;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 211 "qblex.ll"
return token::tINSTR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 212 "qblex.ll"
return token::tINT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 213 "qblex.ll"
return token::tINT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 214 "qblex.ll"
return token::tLEFT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 215 "qblex.ll"
return token::tLEN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 216 "qblex.ll"
return token::tLOG;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 217 "qblex.ll"
return token::tLOWER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 218 "qblex.ll"
return token::tLTRIM;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 219 "qblex.ll"
return token::tMAX;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 220 "qblex.ll"
return token::tMID;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 221 "qblex.ll"
return token::tMIN;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 222 "qblex.ll"
return token::tOPEN;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 223 "qblex.ll"
return token::tPEEK;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 224 "qblex.ll"
return token::tRAN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 225 "qblex.ll"
return token::tPOW;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 226 "qblex.ll"
return token::tRIGHT;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 227 "qblex.ll"
return token::tRINSTR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 228 "qblex.ll"
return token::tRTRIM;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 229 "qblex.ll"
return token::tSIG;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 230 "qblex.ll"
return token::tSIN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 231 "qblex.ll"
return token::tSPLIT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 232 "qblex.ll"
return token::tSPLITALT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 233 "qblex.ll"
return token::tSQR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 234 "qblex.ll"
return token::tSQRT;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 235 "qblex.ll"
return token::tSTR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 236 "qblex.ll"
return token::tSYSTEM;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 237 "qblex.ll"
return token::tTAN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 238 "qblex.ll"
return token::tTELL;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 239 "qblex.ll"
return token::tTOKEN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 240 "qblex.ll"
return token::tTOKENALT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 241 "qblex.ll"
return token::tTRIM;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 242 "qblex.ll"
return token::tUPPER;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 243 "qblex.ll"
return token::tVAL;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 244 "qblex.ll"
return token::tCALL;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 246 "qblex.ll"
return token::tAND;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 247 "qblex.ll"
return token::tMOD;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 248 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 249 "qblex.ll"
return token::tOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 250 "qblex.ll"
return token::tEQU;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 251 "qblex.ll"
return token::tGEQ;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 252 "qblex.ll"
return token::tGTN;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 253 "qblex.ll"
return token::tLEQ;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 254 "qblex.ll"
return token::tLTN;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 255 "qblex.ll"
return token::tNEQ;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 256 "qblex.ll"
return token::tNOT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 258 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 262 "qblex.ll"
{
   yylval->number = strtod ("inf", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 267 "qblex.ll"
{
   yylval->number = strtod ("nan", NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 272 "qblex.ll"
{
   yylval->number = 3.1415926535897932;
   return token::tNUMBER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 277 "qblex.ll"
{
   yylval->number = 2.7182818284590452;
   return token::tNUMBER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 282 "qblex.ll"
{
   yylval->number = 1;
   return token::tNUMBER;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 287 "qblex.ll"
{
   yylval->number = 0;
   return token::tNUMBER;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 292 "qblex.ll"
{
   return token::tDATE;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 296 "qblex.ll"
{
   return token::tTIME;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 300 "qblex.ll"
{
   return token::tENV;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 304 "qblex.ll"
{
   yylval->symbol = strdup ("__numparam");
   return token::tNUMSYM;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 309 "qblex.ll"
{
   yylval->symbol = strdup (SYSTEM_NAME);
   return token::tSTRING;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 314 "qblex.ll"
{
   yylval->string = strdup (VERSION);
   return token::tSTRING;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 319 "qblex.ll"
{
   return token::tARG;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 323 "qblex.ll"
{
   error ("symbol prefix \"__\" is reserved for internal variables");
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 327 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tNUMSYM;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 332 "qblex.ll"
{
   yylval->symbol = strdup (yytext);
   return token::tSTRSYM;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 337 "qblex.ll"
{
   yylval->number = strtod (yytext, NULL);
   return token::tNUMBER;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 342 "qblex.ll"
{
   if (yytext[yyleng - 1] == '\n') {
      printf ("string not terminated");
   }
   for (count = 0; yytext[(yyleng - count - 1) - 1] == '\\'; count++);
   if (count % 2) {
      yyless (yyleng - 1);
      yymore ();
   }
   else {
      yylval->string = strdup (yytext + 1);
      *(yylval->string + yyleng - 2) = '\0';
      replace (yylval->string);
      return token::tSTRING;
   }
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 359 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 363 "qblex.ll"
ECHO;
	YY_BREAK
#line 2267 "/home/cai/projects/basic/compiler/qblex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 620 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 620 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 619);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 363 "qblex.ll"



/* Report an error. */
void yyerror (char *msg) {
   /* Report the error. */
   if (*yytext == '\n' || *yytext == '\0') {
      printf ("%s at end of line", msg);
   }
   else {
      printf ("%s at \"%s\"", msg, yytext);
   }

   /* Return. */
   return;
}

/* Replace escape characters. */
char *replace (char *string) {
   char *from, *to, *pointer;
   char *hexdigits = "0123456789abcdef";
   int value;

   /* Initialise. */
   from = string;
   to = string;

   /* Replace. */
   while (*from) {
      if (*from == '\\') {
         from++;
         switch (*from) {
            case 'n':
               *to = '\n';
               break;
            case 't':
               *to = '\t';
               break;
            case 'v':
               *to = '\v';
               break;
            case 'b':
               *to = '\b';
               break;
            case 'r':
               *to = '\r';
               break;
            case 'f':
               *to = '\f';
               break;
            case 'a':
               *to = '\a';
               break;
            case '\\':
               *to = '\\';
               break;
            case '\?':
               *to = '\?';
               break;
            case '\'':
               *to = '\'';
               break;
            case '\"':
               *to = '\"';
               break;
            case 'x':
               value = 0;
               if ((pointer =
                    strchr (hexdigits, tolower (*(from + 1))))
                   && pointer - hexdigits < 16) {
                  from++;
                  value = pointer - hexdigits;
                  if ((pointer =
                       strchr (hexdigits, tolower (*(from + 1))))
                      && pointer - hexdigits < 16) {
                     from++;
                     value *= 16;
                     value += pointer - hexdigits;
                  }
               }
               *to = value;
               break;
            default:
               *to = '\\';
               to++;
               *to = *from;
               break;
         }
      }
      else
         *to = *from;
      from++;
      to++;
   }
   *to = '\0';

   /* Return. */
   return string;
}

