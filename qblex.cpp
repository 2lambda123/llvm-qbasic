#line 2 "/home/cai/projects/basic/qblex.cpp"

#line 4 "/home/cai/projects/basic/qblex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 148
#define YY_END_OF_BUFFER 149
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[590] =
    {   0,
        0,    0,    0,    0,  149,  147,   14,   11,  127,  147,
      118,    6,  128,  128,  128,  128,  145,   13,  125,  121,
      123,   54,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  147,   98,  143,    7,    4,    3,    4,
       14,    0,  146,    6,   98,  145,    0,    1,    5,  145,
      145,  124,  126,  122,  144,  143,  143,  143,  143,  143,
       17,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,   28,  143,  143,  143,  143,  143,  143,   33,  143,
      143,  143,  143,   44,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  120,  143,  131,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   66,  143,  143,
      143,  143,  143,  143,  143,  143,    0,   12,  142,    7,
        2,    0,  145,    5,   71,  143,  117,  143,   73,  143,
      143,  143,  143,  143,  143,  143,  143,   78,  143,  143,
       24,  143,   26,  143,    9,  143,  143,  143,   38,   79,
       37,  143,  143,  143,   82,  143,   40,  143,  143,  143,
      143,  143,   45,  129,  143,  143,   86,  143,  143,   88,
       48,  143,  143,   89,  143,  143,  143,   92,  143,   94,

      118,  130,  143,  119,  143,  143,  143,  143,  143,   97,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      102,  103,  143,  106,  143,  143,  143,   63,  143,  143,
      110,  143,  143,  143,  143,  143,  143,  143,  143,  116,
      143,  143,   37,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   72,  143,   74,   75,  143,   19,   76,  143,
      143,  143,  143,   22,   23,  143,  143,  143,   10,    9,
       29,   30,  143,  143,    0,  143,  143,  143,  143,  143,
       38,  143,  143,   83,   41,   84,  143,   43,  143,  143,
      143,  143,  143,  143,   49,  143,   51,  143,  143,   93,

       52,   95,  143,   96,   53,  143,   55,    8,  143,  143,
      143,  143,  143,  143,  143,   59,  143,  143,  107,  143,
       61,  108,  143,  143,  143,  143,  111,   65,  143,  143,
      133,  143,  143,  143,   69,  143,  142,  142,  142,  142,
      142,  142,  142,  143,   18,   77,  143,  143,  143,  143,
      143,  143,   10,   10,   10,  143,  143,   29,  143,    0,
        0,    0,  143,   33,  143,  143,  143,  143,  132,  143,
      143,  134,   42,  143,  143,   46,   85,   47,   87,   50,
      143,  143,  143,   54,    8,    8,  143,  143,  143,  143,
      143,  143,  143,  143,  104,  143,  143,  143,  143,  143,

      112,  114,   67,  143,   68,   70,  142,  142,  142,  142,
      142,  142,  142,  143,  143,  143,  143,  143,  143,  143,
      143,   10,   10,  143,   29,   31,    0,   33,    0,    0,
        0,    0,  143,  143,  143,   35,  143,  143,  143,  143,
      143,   90,   91,   31,  143,   56,  143,   58,   99,  100,
      101,   64,  105,   60,   62,  143,   64,  109,  113,  115,
      141,  142,  142,  142,  137,  142,  142,  142,  142,  142,
      143,  143,  143,   20,  143,  143,   25,   27,  143,    0,
        0,    0,   35,    0,   32,  143,  143,  143,  143,   80,
      143,  143,  143,    8,   57,  143,  143,  142,  135,  142,

      142,  142,  136,  142,   15,  143,    8,   21,  143,  143,
       32,    0,    0,    0,    0,  143,  143,  143,  143,   81,
       39,  143,  129,    8,    8,  143,  143,  142,  142,  142,
      142,  142,   16,    8,    8,   24,  143,    0,    0,    0,
        0,   36,   34,  143,   36,   45,   62,  143,  142,  142,
      142,  139,  142,  143,   36,   34,    0,   36,  143,  143,
       63,  142,  142,  138,  140,  143,    0,    0,  143,  143,
      142,  142,  138,  143,    0,    0,   34,  143,  142,    9,
       34,    0,   35,  142,   10,   35,   10,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       10,   11,   12,   10,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   10,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   30,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[603] =
    {   0,
        0, 1574,   72,   73, 1579, 1581, 1576, 1581, 1581,   74,
     1581,    0, 1581, 1566,   63,   71,   74, 1581,   62, 1581,
     1558, 1581,  122,   83,   91,   89,  131,  148,   90, 1568,
      161,  192,  175,  194,  171,  205,  224,  286,  251,  268,
       84,   79,   96,   90, 1581,  249,    0, 1581, 1581, 1560,
     1571,   97, 1581,    0, 1581,   86,   94, 1581,    0,  117,
      211, 1581, 1581, 1581, 1581, 1565,  270,  157,  259,  201,
      287,   87,  266,  274,  262,  255,  314,  292,  296,  339,
      335,  195,  331,  342,  345,  365,  378,  373, 1564,  318,
      366,  371,  370, 1563,  405,  273,  413,  381,  428,  383,

      113,  443,  406,  392,  417,  439,  457, 1562,  433, 1561,
      327,  445,  458,  479,  483,  410,  476,  497,  463,  455,
      527,  487,  499,  449,  507,  495,  519,  491,  525,  528,
      506,  542,  526,  530,  549,  544,  113, 1581,  604,    0,
     1581, 1552, 1551,    0, 1558,  556, 1557,  372, 1556,  553,
      554,  555,  560, 1555,  565,  573,  568, 1554,  567,  577,
      583,  592, 1553,  605,  615,  215,  623,  613,  658, 1552,
     1551,  626,  617,  638,  643,  624, 1550,  660,  640,  654,
      652,  655,  632,  678,  661,  646, 1549,  685,  682, 1548,
     1547,  688,  687, 1546,  681,  702,  697, 1545, 1544, 1543,

     1542, 1541,  689, 1540,  712,  724,  692,  708,  713, 1539,
      717,  733,  727,  721,  725,  731,  737,  742,  736,  753,
     1538, 1537,  751,  756,  757,  741,  758,  765,  761,  762,
     1536,  766,  772,  783,  777,  786,  784,  807,  785, 1535,
      809,  811, 1534, 1581, 1533,  779,  814,  805,  808,  778,
      815,  821, 1532,  813, 1531, 1530,  829, 1529, 1581,  841,
      843,  834,  845, 1528, 1527,  847,  846,  848, 1531,  874,
     1525,  850,  858,  862,  880,  884,  876,  871,  852,  882,
     1524,  891,  899, 1523, 1522, 1521,  878, 1520,  903,  909,
      886,  910,  914, 1518, 1515,  920, 1512,  923,  925, 1581,

     1509, 1506,  929, 1503, 1500,  930, 1497, 1499,  934,  938,
      943,  937,  953,  955,  948, 1485,  956,  959, 1484,  958,
     1483, 1581,  960,  961,  962,  966, 1482, 1481,  970, 1480,
     1479,  975,  977,  983, 1478,  994,  990,  998,  987,  995,
     1006, 1004, 1011, 1023, 1477, 1476, 1018, 1019, 1024, 1026,
     1029, 1035,    0, 1479, 1476, 1015, 1027, 1469, 1043,  155,
     1015, 1053, 1048, 1466, 1053, 1037, 1076, 1077, 1465, 1064,
     1085, 1464, 1462, 1067, 1094, 1461, 1459, 1457, 1581, 1455,
     1454, 1453, 1047, 1452,    0, 1455, 1084, 1065, 1092, 1095,
     1449, 1103, 1443, 1104, 1437, 1111, 1105, 1107, 1110, 1113,

     1435, 1581, 1411, 1373, 1323, 1212, 1112, 1124, 1132, 1118,
     1119, 1135, 1129, 1133, 1148, 1140, 1158, 1157, 1159, 1163,
     1168,    0, 1148, 1181, 1057, 1056,  551, 1581, 1139, 1148,
     1134, 1163, 1188, 1193, 1187, 1194, 1190, 1195, 1204, 1198,
     1197, 1581, 1581,  949,  416,  873, 1200,  849, 1581,  780,
     1581,  693, 1581,  672, 1203, 1210,  634,  596, 1581, 1581,
     1581,  594, 1209,  572, 1581, 1217, 1227, 1220,  478, 1222,
     1228, 1229,  595,  471, 1232, 1233,  459,  420, 1239, 1232,
     1234, 1200, 1225, 1224,  412, 1261, 1264, 1259, 1274,  401,
     1266, 1278, 1269,  402,  375, 1283, 1286, 1292, 1581, 1289,

     1291, 1294, 1581, 1293,  362, 1311,  365,  336, 1295, 1298,
     1581, 1281, 1285, 1275, 1302, 1313, 1324, 1302, 1304, 1581,
      312, 1332,  299,    0,  295, 1316, 1340, 1343, 1344, 1338,
      289, 1351,  281,    0,  285,  278, 1353, 1322, 1326, 1326,
     1340,  277, 1362, 1368,  254,  247,  221, 1366, 1369, 1377,
     1379, 1581,  190, 1372, 1581, 1342, 1347, 1581, 1389, 1375,
      174, 1400, 1391, 1407, 1581, 1412, 1351, 1370, 1416, 1415,
      173, 1417,  172, 1418, 1404, 1392,  163, 1428, 1425, 1441,
     1581, 1409,  160,  139,  133, 1581,    0,  125, 1581, 1493,
     1496, 1499,  110, 1502, 1505,   92, 1508, 1511, 1514, 1517,

     1520, 1523
    } ;

static yyconst flex_int16_t yy_def[603] =
    {   0,
      589,    1,  590,  590,  589,  589,  589,  589,  589,  591,
      589,  592,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  589,  589,  593,  594,  589,  589,  589,
      589,  591,  589,  592,  589,  589,  589,  589,  595,  589,
      589,  589,  589,  589,  589,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  589,  589,  596,  594,
      589,  589,  589,  595,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  589,  596,  596,  596,  596,  596,  596,
      596,  596,  593,  593,  593,  593,  593,  593,  589,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  597,  593,
      593,  593,  593,  593,  589,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  589,

      593,  593,  593,  593,  593,  593,  593,  598,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  589,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  596,  596,  596,  596,
      596,  596,  596,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  597,  597,  599,  593,  593,  593,  593,  589,
      589,  589,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  589,  593,
      593,  593,  593,  593,  598,  598,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593,  589,  593,  593,  593,  593,  596,  596,  596,  596,
      596,  596,  596,  593,  593,  593,  593,  593,  593,  593,
      593,  599,  599,  593,  593,  593,  589,  589,  589,  589,
      589,  589,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  589,  589,  593,  593,  593,  593,  593,  589,  593,
      589,  593,  589,  593,  593,  593,  593,  593,  589,  589,
      589,  596,  596,  596,  589,  596,  596,  596,  596,  596,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  589,
      589,  589,  589,  589,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  600,  593,  593,  593,  596,  589,  596,

      596,  596,  589,  596,  593,  593,  601,  593,  593,  593,
      589,  589,  589,  589,  589,  593,  593,  593,  593,  589,
      593,  593,  593,  600,  600,  593,  593,  596,  596,  596,
      596,  596,  593,  601,  601,  593,  593,  589,  589,  589,
      589,  593,  593,  593,  593,  593,  593,  593,  596,  596,
      596,  589,  596,  593,  589,  589,  589,  589,  593,  593,
      593,  596,  596,  596,  589,  593,  589,  589,  593,  593,
      596,  596,  596,  593,  589,  589,  593,  593,  596,  593,
      589,  589,  593,  596,  602,  589,  602,  602,    0,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589
    } ;

static yyconst flex_int16_t yy_nxt[1656] =
    {   0,
        6,    7,    8,    9,   10,    6,    6,   11,   12,   13,
       14,   13,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   30,
       30,   32,   33,   34,   35,   36,   30,   37,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   45,   46,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   30,   32,
       33,   34,   35,   36,   30,   37,   38,   39,   40,   41,
       42,   43,   30,   30,   49,   49,   53,   56,   53,   62,
       63,   58,   50,   50,   59,   65,   60,   57,   61,   65,
       65,  137,  138,   65,  245,   65,   65,   65,   57,   53,

       56,   53,   65,  134,  133,  142,  135,  151,  143,   79,
       57,   74,   66,   80,  137,  138,   57,   81,   75,   65,
       73,   92,   76,   82,   93,   77,  588,   57,   65,   78,
      136,   56,  134,  133,  588,  135,  151,   65,   79,   57,
       74,   57,   80,   67,   68,  465,   81,   75,   73,   92,
       76,   82,   93,   77,   65,   69,  198,   78,  136,   70,
       71,   72,   83,   65,   84,   85,   65,   65,   88,   65,
       57,   86,   67,   68,   87,  427,   89,   65,  244,  461,
       65,   65,   90,   69,  198,   91,   94,   70,   71,   72,
       83,  146,   84,   85,   95,  101,  565,   88,   65,   86,

       65,   65,   87,  102,  427,   89,  107,   65,  108,  103,
       90,   65,   96,   91,  104,   94,   97,  165,  105,  146,
       98,   65,   95,   60,  101,   61,   99,   65,  106,  109,
       65,  100,  102,  110,  107,   57,  108,  103,  148,  111,
      271,   96,  112,  104,  113,   97,  165,  105,  114,   98,
      137,  138,  115,   65,   99,   65,  106,   65,  109,  100,
       65,   65,  110,  116,   57,   65,  148,  111,   65,  271,
      112,  125,   65,  113,   65,  126,   65,  114,  127,   65,
       65,  115,  147,   65,   65,  128,  535,   65,  129,  155,
      152,  116,   65,   65,  188,  552,  525,  139,   65,  154,

      125,  130,   65,  131,  126,   65,  132,  127,  145,  149,
      117,  147,  153,  128,  118,  150,  129,  155,   65,  152,
       65,  119,  120,  188,   65,  121,  122,  154,  123,  130,
      124,  131,  159,   65,  132,  160,  145,   65,  149,  117,
      153,   65,   65,  118,  150,   65,  156,  157,   65,  119,
      120,   65,  158,  121,  122,  177,  123,  208,  124,  166,
      159,  161,  168,  160,  162,  169,  535,  163,   65,  167,
      170,   65,   65,  164,  156,  157,   65,   65,   65,   65,
      158,   65,  171,  177,   65,  208,  178,   65,  166,   65,
      161,  168,  254,  162,  169,  163,  172,  167,   65,  170,

      179,  164,  173,  525,  176,  180,  174,  520,  181,  182,
      171,   65,   65,  175,  192,  178,   65,  494,   65,   65,
      197,  254,   65,   65,  172,  202,   65,  183,  179,  201,
      184,  173,  176,  180,   65,  174,  181,  182,  189,   65,
      185,  175,  192,  186,  187,   65,  190,  218,  197,   65,
      193,   65,  191,  202,  194,   65,  183,  207,  201,  184,
      203,   65,  195,   65,   65,   65,  199,  189,  185,   65,
      196,  186,  187,  209,  190,  218,  200,   65,  204,  193,
      191,  205,   65,  194,  503,   65,  207,  230,  203,   65,
      195,  210,  224,   65,  223,  199,  206,   65,  196,  211,

      219,   65,  209,   65,  200,   65,  204,  220,  228,  216,
      205,  212,   65,   65,  213,  230,  217,  214,  215,  210,
      224,  234,  223,  221,  206,   65,  232,  229,  211,  219,
      222,   65,   65,   65,   65,  220,   65,  228,  216,  212,
      231,  238,  213,  233,  217,  214,  215,  225,   65,  234,
       65,  226,  221,  235,  232,   65,  229,  240,  222,   65,
       65,   65,   65,  241,  227,  236,   65,  237,  231,  238,
      239,   65,  233,   65,   65,  257,  225,  242,  499,   65,
      226,  243,  235,   65,  258,  240,  255,  256,  264,   65,
      480,  241,  227,  236,  253,  237,  507,  265,   65,  239,

      461,   65,   65,  260,  257,  261,  242,  263,  262,  243,
      244,   65,  267,  258,  255,  256,  269,  264,  480,   65,
      266,   65,  253,   65,  246,  268,  265,  247,  248,   65,
       65,  260,   65,  261,  274,  263,  262,  249,   65,  280,
       65,  267,  250,  251,   65,  252,   65,  272,  266,   65,
      279,  273,   65,  246,  268,  270,  247,  248,   65,  275,
       65,   65,  283,  274,   65,  249,   65,   65,  280,  289,
      250,  251,  285,  252,  282,  286,  272,  281,   65,  279,
      273,  276,  284,  270,   65,  292,  277,   65,   65,  288,
      283,   65,  287,   65,   65,   65,  278,  289,   65,   65,

      285,  291,  282,   65,  286,  281,  290,  296,   65,  293,
      276,  284,  295,  292,   65,  277,  297,  288,   65,   65,
      287,  294,  304,   65,  278,  299,  298,   65,  301,  291,
       65,   65,  305,   65,  308,  290,  296,   65,  293,   65,
      307,  295,   65,   65,  297,  302,  306,   65,   65,  294,
      304,  310,  303,  309,  299,  298,  301,   65,  313,   65,
      311,  305,   65,   65,  322,  312,  316,   65,   65,  307,
      315,   65,   65,  302,  306,  314,  321,  317,   65,  318,
      310,  303,  309,   65,  244,  244,   65,  313,  311,   65,
       65,   65,   65,  312,  316,  319,  320,  327,  323,  315,

      325,  326,  324,  314,  321,  328,  317,  329,  318,  330,
      331,  244,  332,   65,  244,   65,  337,   65,  334,   65,
      244,  244,  341,  319,  320,  327,  323,  244,  325,  326,
      324,  333,  335,  328,  338,   65,  329,  330,  339,  331,
       65,  332,  336,  342,  337,  343,  334,   65,  340,   65,
      341,   65,   65,   65,   65,   65,   65,  344,   65,  345,
      333,  335,  348,  338,   65,  346,  339,  347,   65,  352,
      336,  350,  342,  349,  343,  355,  340,   65,  357,   65,
       65,  275,   65,  358,   65,  344,  351,  345,   65,  369,
       65,  348,   65,  359,  346,  365,  347,   65,  352,  373,

      350,  364,  349,  360,  363,   65,  356,  357,  361,   65,
      366,  367,  358,  368,  351,   65,   65,  369,  362,  371,
       65,  359,  370,  372,  365,  376,   65,  374,  373,   65,
      364,   65,  360,  363,  356,   65,   65,  361,  366,  367,
       65,  368,  375,   65,   65,  378,  362,  377,  371,   65,
      370,  380,  372,  376,   65,   65,  374,  382,  388,   65,
      381,   65,   65,  383,   65,   65,   65,   65,   65,  384,
      375,  387,   65,  378,  390,  377,   65,  389,  394,  380,
      393,   65,  397,   65,  399,  382,  396,  388,  381,   65,
      400,  383,  391,  244,  392,  398,  244,  384,  395,  387,

       65,  244,  390,  401,  244,  389,  403,  394,  393,  405,
      244,  397,  244,  399,  404,  396,  407,  244,  406,  400,
      391,   65,  392,  398,   65,   65,  395,  410,  409,   65,
       65,  401,   65,   65,  403,   65,  412,  408,  405,  424,
      428,   65,  404,   65,  411,  407,  414,  406,  413,   65,
      417,  416,  425,   65,   65,  410,  409,  418,  419,   65,
      420,  415,   65,   65,  412,  408,  421,  426,  424,  428,
       65,   65,  411,   65,  435,  414,  413,  429,  417,  416,
      444,  425,   65,   65,  434,  418,  419,  433,  420,  415,
       65,   65,  430,  431,  421,  432,  426,  436,   65,  440,

       65,   65,  435,  438,  446,  437,  429,  439,  444,   65,
       65,   65,  434,   65,  445,  433,   65,   65,  461,   65,
      430,  431,  441,  432,  244,  244,  436,  440,  448,  447,
      244,  438,  446,  454,  437,  244,  439,  457,  465,   65,
      450,  244,  445,  452,  455,  458,   65,  456,  464,  423,
      462,  441,  463,  467,   65,  483,  448,  447,  468,  469,
      466,  471,  454,   65,   65,   65,  457,  470,  450,   65,
      481,  452,  455,  458,   65,  456,  472,  464,  462,  473,
      463,  467,  474,  476,  483,  482,  468,   65,  469,  466,
      471,  484,  478,   65,   65,  470,   65,  475,  481,   65,

       65,   65,  477,   65,   65,  472,   65,  473,  485,   65,
       65,  474,  476,  482,  479,  244,   65,  486,   65,  490,
      484,  478,  492,  244,  495,  475,  244,  487,  244,  489,
      477,  488,  491,  244,   65,   65,  493,  485,   65,   65,
      513,  498,  479,  496,  502,   65,  486,  501,  490,  497,
      504,  492,  511,  495,  500,  487,  508,  489,  512,  488,
      505,  491,  514,  515,  493,   65,  509,   65,  513,  498,
       65,  496,   65,  502,  506,   65,  501,  497,  510,  504,
       65,  511,  500,  516,   65,  508,  517,  512,  505,   65,
      514,  515,   65,  518,  509,  244,  519,  244,  244,  244,

      244,   65,  506,  538,   65,  521,  510,  539,   65,  540,
       65,  522,  516,  523,  527,  517,  528,   65,  537,   65,
      526,  518,   65,  529,  541,  519,  531,  532,  530,   65,
       65,  545,  538,  521,  536,  533,  539,  540,   65,  522,
      547,  523,  544,  527,  244,  528,   65,  537,  526,  244,
      244,  529,  542,  541,  531,  532,  530,  244,  551,   65,
      545,  555,  536,  543,  533,  556,  557,  558,   65,  547,
      544,  546,   65,  548,   65,  244,  549,  550,   65,  460,
      542,   65,  567,  244,  553,  244,  568,  551,  575,  555,
      561,  543,  554,  556,  557,   65,  558,  244,  576,  546,

      566,  548,  559,  570,  549,  550,  461,  560,  562,  563,
      567,  564,  553,  244,  568,  572,  575,   65,   65,  561,
      554,   65,   65,  244,   65,  582,  569,  576,  581,  566,
      559,  244,  570,  586,   65,  560,  562,  563,  571,  564,
      577,  459,  585,  453,  572,  573,  574,   65,  578,  451,
      579,  580,  583,  582,  569,  449,  386,  581,   65,  443,
      442,   65,  586,   65,  584,   65,  571,   65,   65,  577,
       65,   65,   65,  573,  574,   65,  578,  423,  579,  580,
      354,  583,   65,   65,   65,   65,  402,   65,   65,   65,
       65,   65,  584,   48,   48,   48,   52,   52,   52,   54,

      386,   54,  140,   65,  140,  144,   65,  144,  353,   65,
      353,  385,   65,  385,  422,   65,  422,  524,   65,  524,
      534,   65,  534,  587,  379,  587,   65,   65,   65,   65,
       65,   65,  354,   65,   65,   65,   65,   65,   65,  244,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      300,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,  259,   65,   65,   65,  143,  143,   65,   65,   65,
       65,   65,   51,  141,   65,   64,   55,   51,  589,   47,
        5,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589
    } ;

static yyconst flex_int16_t yy_chk[1656] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   10,   15,   10,   19,
       19,   16,    3,    4,   16,   42,   17,   15,   17,   24,
       41,   44,   44,   72,  596,   26,   29,   25,   17,   52,

       56,   52,   43,   42,   41,   57,   42,   72,   57,   26,
       56,   25,  593,   26,  137,  137,   15,   26,   25,  101,
       24,   29,   25,   26,   29,   25,  588,   17,   23,   25,
       43,   60,   42,   41,  585,   42,   72,   27,   26,   56,
       25,   60,   26,   23,   23,  584,   26,   25,   24,   29,
       25,   26,   29,   25,   28,   23,  101,   25,   43,   23,
       23,   23,   27,   68,   27,   27,  583,   31,   28,  577,
       60,   27,   23,   23,   27,  360,   28,   35,  573,  571,
      561,   33,   28,   23,  101,   28,   31,   23,   23,   23,
       27,   68,   27,   27,   31,   33,  553,   28,   32,   27,

       34,   82,   27,   33,  360,   28,   35,   70,   35,   33,
       28,   36,   32,   28,   34,   31,   32,   82,   34,   68,
       32,  166,   31,   61,   33,   61,   32,  547,   34,   36,
       37,   32,   33,   36,   35,   61,   35,   33,   70,   36,
      166,   32,   36,   34,   37,   32,   82,   34,   37,   32,
       46,   46,   37,  546,   32,   46,   34,   39,   36,   32,
      545,   76,   36,   37,   61,   69,   70,   36,   75,  166,
       36,   39,   73,   37,   40,   39,   67,   37,   39,   96,
       74,   37,   69,  542,  536,   39,  535,  533,   39,   76,
       73,   37,   38,   71,   96,  531,  525,   46,   78,   75,

       39,   40,   79,   40,   39,  523,   40,   39,   67,   71,
       38,   69,   74,   39,   38,   71,   39,   76,  521,   73,
       77,   38,   38,   96,   90,   38,   38,   75,   38,   40,
       38,   40,   78,  111,   40,   79,   67,   83,   71,   38,
       74,   81,  508,   38,   71,   80,   77,   77,   84,   38,
       38,   85,   77,   38,   38,   90,   38,  111,   38,   83,
       78,   80,   84,   79,   80,   84,  507,   81,  505,   83,
       85,   86,   91,   81,   77,   77,   93,   92,  148,   88,
       77,  495,   85,   90,   87,  111,   91,   98,   83,  100,
       80,   84,  148,   80,   84,   81,   86,   83,  104,   85,

       91,   81,   87,  494,   88,   92,   87,  490,   93,   93,
       85,   95,  103,   87,   98,   91,  116,  445,  485,   97,
      100,  148,  445,  105,   86,  104,  478,   95,   91,  103,
       95,   87,   88,   92,   99,   87,   93,   93,   97,  109,
       95,   87,   98,   95,   95,  106,   97,  116,  100,  102,
       99,  112,   97,  104,   99,  124,   95,  109,  103,   95,
      105,  120,   99,  107,  113,  477,  102,   97,   95,  119,
       99,   95,   95,  112,   97,  116,  102,  474,  106,   99,
       97,  107,  117,   99,  469,  114,  109,  124,  105,  115,
       99,  113,  120,  122,  119,  102,  107,  128,   99,  114,

      117,  126,  112,  118,  102,  123,  106,  117,  122,  115,
      107,  114,  131,  125,  114,  124,  115,  114,  114,  113,
      120,  128,  119,  118,  107,  127,  126,  123,  114,  117,
      118,  129,  133,  121,  130,  117,  134,  122,  115,  114,
      125,  131,  114,  127,  115,  114,  114,  121,  132,  128,
      136,  121,  118,  129,  126,  135,  123,  133,  118,  150,
      151,  152,  146,  134,  121,  129,  153,  130,  125,  131,
      132,  155,  127,  159,  157,  152,  121,  135,  464,  156,
      121,  136,  129,  160,  153,  133,  150,  151,  159,  161,
      427,  134,  121,  129,  146,  130,  473,  160,  162,  132,

      462,  473,  458,  155,  152,  156,  135,  157,  156,  136,
      139,  164,  162,  153,  150,  151,  165,  159,  427,  168,
      161,  165,  146,  173,  139,  164,  160,  139,  139,  167,
      176,  155,  172,  156,  168,  157,  156,  139,  183,  173,
      457,  162,  139,  139,  174,  139,  179,  167,  161,  175,
      172,  167,  186,  139,  164,  165,  139,  139,  181,  169,
      180,  182,  176,  168,  169,  139,  178,  185,  173,  183,
      139,  139,  179,  139,  175,  180,  167,  174,  454,  172,
      167,  169,  178,  165,  184,  186,  169,  195,  189,  182,
      176,  188,  181,  193,  192,  203,  169,  183,  207,  452,

      179,  185,  175,  197,  180,  174,  184,  193,  196,  188,
      169,  178,  192,  186,  208,  169,  195,  182,  205,  209,
      181,  189,  207,  211,  169,  197,  196,  214,  203,  185,
      206,  215,  208,  213,  212,  184,  193,  216,  188,  212,
      211,  192,  219,  217,  195,  205,  209,  226,  218,  189,
      207,  213,  206,  212,  197,  196,  203,  223,  216,  220,
      214,  208,  224,  225,  227,  215,  219,  229,  230,  211,
      218,  228,  232,  205,  209,  217,  226,  220,  233,  223,
      213,  206,  212,  235,  250,  246,  450,  216,  214,  234,
      237,  239,  236,  215,  219,  224,  225,  232,  227,  218,

      229,  230,  228,  217,  226,  233,  220,  234,  223,  235,
      236,  248,  237,  238,  249,  241,  246,  242,  239,  254,
      247,  251,  250,  224,  225,  232,  227,  252,  229,  230,
      228,  238,  241,  233,  247,  257,  234,  235,  248,  236,
      262,  237,  242,  251,  246,  252,  239,  260,  249,  261,
      250,  263,  267,  266,  268,  448,  272,  254,  279,  257,
      238,  241,  262,  247,  273,  260,  248,  261,  274,  268,
      242,  266,  251,  263,  252,  270,  249,  278,  272,  446,
      270,  275,  277,  273,  287,  254,  267,  257,  280,  279,
      276,  262,  291,  274,  260,  278,  261,  282,  268,  287,

      266,  277,  263,  275,  276,  283,  270,  272,  275,  289,
      278,  278,  273,  278,  267,  290,  292,  279,  275,  282,
      293,  274,  280,  283,  278,  291,  296,  289,  287,  298,
      277,  299,  275,  276,  270,  303,  306,  275,  278,  278,
      309,  278,  290,  312,  310,  293,  275,  292,  282,  311,
      280,  296,  283,  291,  315,  444,  289,  299,  310,  313,
      298,  314,  317,  303,  320,  318,  323,  324,  325,  306,
      290,  309,  326,  293,  312,  292,  329,  311,  317,  296,
      315,  332,  323,  333,  325,  299,  320,  310,  298,  334,
      326,  303,  313,  339,  314,  324,  337,  306,  318,  309,

      336,  340,  312,  329,  338,  311,  332,  317,  315,  334,
      342,  323,  341,  325,  333,  320,  337,  343,  336,  326,
      313,  356,  314,  324,  347,  348,  318,  340,  339,  344,
      349,  329,  350,  357,  332,  351,  342,  338,  334,  356,
      361,  352,  333,  366,  341,  337,  344,  336,  343,  359,
      348,  347,  357,  383,  363,  340,  339,  349,  350,  365,
      351,  344,  426,  425,  342,  338,  352,  359,  356,  361,
      370,  388,  341,  374,  366,  344,  343,  362,  348,  347,
      383,  357,  367,  368,  365,  349,  350,  363,  351,  344,
      387,  371,  362,  362,  352,  362,  359,  367,  389,  374,

      375,  390,  366,  370,  388,  368,  362,  371,  383,  392,
      394,  397,  365,  398,  387,  363,  399,  396,  407,  400,
      362,  362,  375,  362,  410,  411,  367,  374,  390,  389,
      408,  370,  388,  396,  368,  413,  371,  399,  409,  414,
      392,  412,  387,  394,  397,  400,  416,  398,  408,  423,
      407,  375,  407,  410,  415,  431,  390,  389,  411,  412,
      409,  414,  396,  418,  417,  419,  399,  413,  392,  420,
      429,  394,  397,  400,  421,  398,  415,  408,  407,  416,
      407,  410,  417,  419,  431,  430,  411,  424,  412,  409,
      414,  432,  421,  435,  433,  413,  437,  418,  429,  434,

      436,  438,  420,  441,  440,  415,  447,  416,  433,  455,
      439,  417,  419,  430,  424,  463,  456,  434,  406,  438,
      432,  421,  440,  466,  447,  418,  468,  435,  470,  437,
      420,  436,  439,  467,  471,  472,  441,  433,  475,  476,
      482,  463,  424,  455,  468,  479,  434,  467,  438,  456,
      470,  440,  480,  447,  466,  435,  475,  437,  481,  436,
      471,  439,  483,  484,  441,  488,  476,  486,  482,  463,
      487,  455,  491,  468,  472,  493,  467,  456,  479,  470,
      489,  480,  466,  486,  492,  475,  487,  481,  471,  496,
      483,  484,  497,  488,  476,  500,  489,  501,  498,  504,

      502,  509,  472,  512,  510,  491,  479,  513,  518,  514,
      519,  492,  486,  493,  497,  487,  498,  506,  510,  516,
      496,  488,  526,  500,  515,  489,  502,  504,  501,  405,
      517,  519,  512,  491,  509,  506,  513,  514,  522,  492,
      526,  493,  518,  497,  530,  498,  527,  510,  496,  528,
      529,  500,  516,  515,  502,  504,  501,  532,  530,  537,
      519,  538,  509,  517,  506,  539,  540,  541,  543,  526,
      518,  522,  548,  527,  544,  549,  528,  529,  554,  404,
      516,  560,  556,  550,  532,  551,  557,  530,  567,  538,
      548,  517,  537,  539,  540,  559,  541,  563,  568,  522,

      554,  527,  543,  560,  528,  529,  562,  544,  549,  550,
      556,  551,  532,  564,  557,  563,  567,  403,  566,  548,
      537,  570,  569,  572,  574,  576,  559,  568,  575,  554,
      543,  579,  560,  582,  578,  544,  549,  550,  562,  551,
      569,  401,  580,  395,  563,  564,  566,  580,  570,  393,
      572,  574,  578,  576,  559,  391,  386,  575,  384,  382,
      381,  380,  582,  378,  579,  377,  562,  376,  373,  569,
      372,  369,  364,  564,  566,  358,  570,  355,  572,  574,
      354,  578,  346,  345,  335,  331,  330,  328,  327,  321,
      319,  316,  579,  590,  590,  590,  591,  591,  591,  592,

      308,  592,  594,  307,  594,  595,  305,  595,  597,  304,
      597,  598,  302,  598,  599,  301,  599,  600,  297,  600,
      601,  295,  601,  602,  294,  602,  288,  286,  285,  284,
      281,  271,  269,  265,  264,  258,  256,  255,  253,  245,
      243,  240,  231,  222,  221,  210,  204,  202,  201,  200,
      199,  198,  194,  191,  190,  187,  177,  171,  170,  163,
      158,  154,  149,  147,  145,  143,  142,  110,  108,   94,
       89,   66,   51,   50,   30,   21,   14,    7,    5,    2,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qblex.ll"
/*
    lexcial analize for QBASIC
	Copyright (C) 2009-2010 Thomas Larsen and Pedro Sá.
	Copyright (C) 1995-2005 Marc-Oliver Ihm.
    Copyright (C) 2012  microcai <microcai@fedoraproject.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#line 24 "qblex.ll"

/* Include main header file. */
#include "qbc.h"

/* Get tokens from parser library. */
#include "parser.hpp"

#define error printf
/* Local variables. */
int count = 0;                  /* for strings */
int scanning_string = false;    /* scanning a string as opposed to a file? */
#define YY_NO_INPUT 1

#line 1055 "/home/cai/projects/basic/qblex.cpp"

#define INITIAL 0
#define block_comment 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "qblex.ll"


#line 1242 "/home/cai/projects/basic/qblex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 590 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1581 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
#line 50 "qblex.ll"
{

   return tEOPROG;
   
}
	YY_BREAK
case 1:
YY_RULE_SETUP
#line 56 "qblex.ll"
{
   yylval.separator = 0;
   BEGIN (block_comment);
}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 61 "qblex.ll"
{
   BEGIN (INITIAL);
   return tSEPARATOR;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 65 "qblex.ll"
{
   yylval.separator += 1;
}
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 68 "qblex.ll"
{
   error ("block comment not terminated");
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "qblex.ll"
/* eat comment */
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 74 "qblex.ll"
/* eat comment */ {
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 79 "qblex.ll"
/* eat comment */ {
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "qblex.ll"
/* eat comment */ {
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "qblex.ll"
/* eat comment */ {
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "qblex.ll"
/* add to program documentation */ {
 //  add_doc (strdup (""));
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 100 "qblex.ll"
/* add to program documentation */ {
   for (count = 1; *yytext != ' ' && *yytext != '\r' && *yytext != '\t' && *yytext != '\f' && *yytext != '\v'; count++) {
      yytext ++;
   }
   yytext ++;
  // add_doc (mystrdup (yytext));
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 110 "qblex.ll"
{
   yylval.separator = 1;
   return tSEPARATOR;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 115 "qblex.ll"
{  /* handle line continuation */
   yylineno += 1;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "qblex.ll"
{
   yylval.separator = 0;
   return tSEPARATOR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 124 "qblex.ll"
/* eat whitespace */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "qblex.ll"
return tARDIM;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 127 "qblex.ll"
return tARSIZE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "qblex.ll"
return tAS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "qblex.ll"
return tBREAK;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "qblex.ll"
return tCASE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 131 "qblex.ll"
return tCOMPILE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "qblex.ll"
return tCONTINUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "qblex.ll"
return tCSUB;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 134 "qblex.ll"
return tDATA;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "qblex.ll"
return tDEC;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 136 "qblex.ll"
return tDEFAULT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "qblex.ll"
return tDIM;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "qblex.ll"
return tDISABLE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "qblex.ll"
return tDO;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "qblex.ll"
return tELSEIF;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "qblex.ll"
return tELSE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "qblex.ll"
return tENABLE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "qblex.ll"
return tENDDATA;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "qblex.ll"
return tENDIF;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "qblex.ll"
return tENDSTRUCT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "qblex.ll"
return tENDSUB;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "qblex.ll"
return tSEND;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "qblex.ll"
return tEOR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "qblex.ll"
return tEXIT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "qblex.ll"
return tEXPLICIT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "qblex.ll"
return tFOR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 152 "qblex.ll"
return tFROM;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "qblex.ll"
return tGOSUB;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 154 "qblex.ll"
return tGOTO;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "qblex.ll"
return tIF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 156 "qblex.ll"
return tINC;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "qblex.ll"
return tINPUT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "qblex.ll"
return tLABEL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "qblex.ll"
return tLET;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "qblex.ll"
return tLINE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "qblex.ll"
return tLOCAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "qblex.ll"
return tLOOP;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "qblex.ll"
return tNEXT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "qblex.ll"
return tPOKE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "qblex.ll"
return tPRINT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "qblex.ll"
return tREAD;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 167 "qblex.ll"
return tREPEAT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 168 "qblex.ll"
return tRESTORE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 169 "qblex.ll"
return tRETURN;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 170 "qblex.ll"
return tSEEK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 171 "qblex.ll"
return tSTATIC;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 172 "qblex.ll"
return tSTEP;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 173 "qblex.ll"
return tSTRUCT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 174 "qblex.ll"
return tSUB;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 175 "qblex.ll"
return tSWITCH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 176 "qblex.ll"
return tTHEN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 177 "qblex.ll"
return tTO;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 178 "qblex.ll"
return tUNTIL;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 179 "qblex.ll"
return tUSING;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 180 "qblex.ll"
return tWEND;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 181 "qblex.ll"
return tWHILE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 183 "qblex.ll"
return tABS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 184 "qblex.ll"
return tACOS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 185 "qblex.ll"
return tASC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 186 "qblex.ll"
return tASIN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 187 "qblex.ll"
return tATAN;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 188 "qblex.ll"
return tCHR;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 189 "qblex.ll"
return tCLOSE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 190 "qblex.ll"
return tCOS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 191 "qblex.ll"
return tEOF;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 192 "qblex.ll"
return tEXECUTERETURNNUMBER;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 193 "qblex.ll"
return tEXECUTERETURNSTRING;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 194 "qblex.ll"
return tEXP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 195 "qblex.ll"
return tFRAC;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 196 "qblex.ll"
return tGLOB;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 197 "qblex.ll"
return tINSTR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 198 "qblex.ll"
return tINT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 199 "qblex.ll"
return tLEFT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 200 "qblex.ll"
return tLEN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 201 "qblex.ll"
return tLOG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 202 "qblex.ll"
return tLOWER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 203 "qblex.ll"
return tLTRIM;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 204 "qblex.ll"
return tMAX;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 205 "qblex.ll"
return tMID;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 206 "qblex.ll"
return tMIN;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 207 "qblex.ll"
return tOPEN;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 208 "qblex.ll"
return tPEEK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 209 "qblex.ll"
return tRAN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 210 "qblex.ll"
return tPOW;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 211 "qblex.ll"
return tRIGHT;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 212 "qblex.ll"
return tRINSTR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 213 "qblex.ll"
return tRTRIM;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 214 "qblex.ll"
return tSIG;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 215 "qblex.ll"
return tSIN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 216 "qblex.ll"
return tSPLIT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 217 "qblex.ll"
return tSPLITALT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 218 "qblex.ll"
return tSQR;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 219 "qblex.ll"
return tSQRT;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 220 "qblex.ll"
return tSTR;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 221 "qblex.ll"
return tSYSTEM;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 222 "qblex.ll"
return tTAN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 223 "qblex.ll"
return tTELL;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 224 "qblex.ll"
return tTOKEN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 225 "qblex.ll"
return tTOKENALT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 226 "qblex.ll"
return tTRIM;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 227 "qblex.ll"
return tUPPER;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 228 "qblex.ll"
return tVAL;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 230 "qblex.ll"
return tAND;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 231 "qblex.ll"
return tMOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 232 "qblex.ll"
return tNOT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 233 "qblex.ll"
return tOR;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 234 "qblex.ll"
return tEQU;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 235 "qblex.ll"
return tGEQ;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 236 "qblex.ll"
return tGTN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 237 "qblex.ll"
return tLEQ;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 238 "qblex.ll"
return tLTN;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 239 "qblex.ll"
return tNEQ;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 240 "qblex.ll"
return tNOT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 242 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 246 "qblex.ll"
{
   yylval.number = strtod ("inf", NULL);
   return tNUMBER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 251 "qblex.ll"
{
   yylval.number = strtod ("nan", NULL);
   return tNUMBER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 256 "qblex.ll"
{
   yylval.number = 3.1415926535897932;
   return tNUMBER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 261 "qblex.ll"
{
   yylval.number = 2.7182818284590452;
   return tNUMBER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 266 "qblex.ll"
{
   yylval.number = 1;
   return tNUMBER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 271 "qblex.ll"
{
   yylval.number = 0;
   return tNUMBER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 276 "qblex.ll"
{
   return tDATE;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 280 "qblex.ll"
{
   return tTIME;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 284 "qblex.ll"
{
   return tENV;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "qblex.ll"
{
   yylval.symbol = strdup ("__numparam");
   return tNUMSYM;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 293 "qblex.ll"
{
   yylval.symbol = strdup (SYSTEM_NAME);
   return tSTRING;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 298 "qblex.ll"
{
   yylval.string = strdup (VERSION);
   return tSTRING;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 303 "qblex.ll"
{
   return tARG;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 307 "qblex.ll"
{
   error ("symbol prefix \"__\" is reserved for internal variables");
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 311 "qblex.ll"
{
   yylval.symbol = strdup (yytext);
   return tNUMSYM;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "qblex.ll"
{
   yylval.symbol = strdup (yytext);
   return tSTRSYM;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 321 "qblex.ll"
{
   yylval.number = strtod (yytext, NULL);
   return tNUMBER;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 326 "qblex.ll"
{
   if (yytext[yyleng - 1] == '\n') {
      error ("string not terminated");
   }
   for (count = 0; yytext[(yyleng - count - 1) - 1] == '\\'; count++);
   if (count % 2) {
      yyless (yyleng - 1);
      yymore ();
   }
   else {
      yylval.string = strdup (yytext + 1);
      *(yylval.string + yyleng - 2) = '\0';
      replace (yylval.string);
      return tSTRING;
   }
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 343 "qblex.ll"
{
   return yytext[1 - 1];
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 347 "qblex.ll"
ECHO;
	YY_BREAK
#line 2197 "/home/cai/projects/basic/qblex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 590 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 590 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 589);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 347 "qblex.ll"



/* Report an error. */
void yyerror (char *msg) {
   /* Report the error. */
   if (*yytext == '\n' || *yytext == '\0') {
      error ("%s at end of line", msg);
   }
   else {
      error ("%s at \"%s\"", msg, yytext);
   }

   /* Return. */
   return;
}

/* Open a string for scanning. Note that this function should only be
 * used either *before* the first file has been parsed or *after* the
 * last file has been parsed. */
void open_string (char *string) {
   /* Switch to string buffer. */
   scanning_string = true;
   yy_switch_to_buffer (yy_scan_string (string));
   //current_file = current->file;
  // yylineno = current->line;

   /* Return. */
   return;
}


/* Replace escape characters. */
char *replace (char *string) {
   char *from, *to, *pointer;
   char *hexdigits = "0123456789abcdef";
   int value;

   /* Initialise. */
   from = string;
   to = string;

   /* Replace. */
   while (*from) {
      if (*from == '\\') {
         from++;
         switch (*from) {
            case 'n':
               *to = '\n';
               break;
            case 't':
               *to = '\t';
               break;
            case 'v':
               *to = '\v';
               break;
            case 'b':
               *to = '\b';
               break;
            case 'r':
               *to = '\r';
               break;
            case 'f':
               *to = '\f';
               break;
            case 'a':
               *to = '\a';
               break;
            case '\\':
               *to = '\\';
               break;
            case '\?':
               *to = '\?';
               break;
            case '\'':
               *to = '\'';
               break;
            case '\"':
               *to = '\"';
               break;
            case 'x':
               value = 0;
               if ((pointer =
                    strchr (hexdigits, tolower (*(from + 1))))
                   && pointer - hexdigits < 16) {
                  from++;
                  value = pointer - hexdigits;
                  if ((pointer =
                       strchr (hexdigits, tolower (*(from + 1))))
                      && pointer - hexdigits < 16) {
                     from++;
                     value *= 16;
                     value += pointer - hexdigits;
                  }
               }
               *to = value;
               break;
            default:
               *to = '\\';
               to++;
               *to = *from;
               break;
         }
      }
      else
         *to = *from;
      from++;
      to++;
   }
   *to = '\0';

   /* Return. */
   return string;
}

